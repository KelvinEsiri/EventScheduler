@if (isVisible)
{
    <div class="toast-container @(position)">
        <div class="toast @(GetToastClass()) show">
            <div class="toast-icon">
                <i class="bi bi-@(GetIconClass())"></i>
            </div>
            <div class="toast-content">
                <div class="toast-title">@title</div>
                @if (!string.IsNullOrEmpty(message))
                {
                    <div class="toast-message">@message</div>
                }
            </div>
            <button class="toast-close" @onclick="Close">
                <i class="bi bi-x"></i>
            </button>
        </div>
    </div>
}

<style>
    .toast-container {
        position: fixed;
        z-index: 9999;
        pointer-events: none;
    }

    .toast-container.top-right {
        top: 20px;
        right: 20px;
    }

    .toast-container.top-center {
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
    }

    .toast-container.bottom-right {
        bottom: 20px;
        right: 20px;
    }

    .toast {
        pointer-events: auto;
        display: flex;
        align-items: center;
        gap: 1rem;
        min-width: 300px;
        max-width: 500px;
        padding: 1rem 1.25rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        border-left: 4px solid;
        animation: slideIn 0.3s ease;
        opacity: 0;
    }

    .toast.show {
        opacity: 1;
    }

    .toast.success {
        border-left-color: #48bb78;
    }

    .toast.error {
        border-left-color: #f56565;
    }

    .toast.warning {
        border-left-color: #ed8936;
    }

    .toast.info {
        border-left-color: #4299e1;
    }

    .toast-icon {
        font-size: 1.5rem;
        flex-shrink: 0;
    }

    .toast.success .toast-icon {
        color: #48bb78;
    }

    .toast.error .toast-icon {
        color: #f56565;
    }

    .toast.warning .toast-icon {
        color: #ed8936;
    }

    .toast.info .toast-icon {
        color: #4299e1;
    }

    .toast-content {
        flex: 1;
    }

    .toast-title {
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 0.25rem;
    }

    .toast-message {
        font-size: 0.9rem;
        color: #718096;
    }

    .toast-close {
        background: none;
        border: none;
        color: #a0aec0;
        cursor: pointer;
        padding: 0.25rem;
        font-size: 1.25rem;
        border-radius: 4px;
        transition: all 0.2s ease;
        flex-shrink: 0;
    }

    .toast-close:hover {
        background: #f7fafc;
        color: #718096;
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateX(100%);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @@media (max-width: 576px) {
        .toast {
            min-width: 280px;
            max-width: calc(100vw - 40px);
        }
    }
</style>

@code {
    [Parameter]
    public string? title { get; set; }
    
    [Parameter]
    public string? message { get; set; }
    
    [Parameter]
    public ToastType type { get; set; } = ToastType.Info;
    
    [Parameter]
    public string position { get; set; } = "top-right";
    
    [Parameter]
    public int duration { get; set; } = 5000;
    
    [Parameter]
    public EventCallback OnClose { get; set; }
    
    private bool isVisible = false;
    private System.Threading.Timer? timer;

    public enum ToastType
    {
        Success,
        Error,
        Warning,
        Info
    }

    protected override void OnInitialized()
    {
        Show();
    }

    public void Show()
    {
        isVisible = true;
        StateHasChanged();

        if (duration > 0)
        {
            timer = new System.Threading.Timer(_ =>
            {
                InvokeAsync(Close);
            }, null, duration, Timeout.Infinite);
        }
    }

    private async Task Close()
    {
        isVisible = false;
        timer?.Dispose();
        StateHasChanged();
        
        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync();
        }
    }

    private string GetToastClass()
    {
        return type switch
        {
            ToastType.Success => "success",
            ToastType.Error => "error",
            ToastType.Warning => "warning",
            ToastType.Info => "info",
            _ => "info"
        };
    }

    private string GetIconClass()
    {
        return type switch
        {
            ToastType.Success => "check-circle-fill",
            ToastType.Error => "exclamation-circle-fill",
            ToastType.Warning => "exclamation-triangle-fill",
            ToastType.Info => "info-circle-fill",
            _ => "info-circle-fill"
        };
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
