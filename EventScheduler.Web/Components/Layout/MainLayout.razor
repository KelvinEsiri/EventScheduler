@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<link rel="stylesheet" href="~/css/layout.css" />

<style>
    /* Enhanced MainLayout styles */
    .layout-wrapper {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }
    
    .top-navbar {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.2);
        position: sticky;
        top: 0;
        z-index: 1000;
    }

    .navbar-brand {
        font-weight: 700;
        font-size: 1.25rem;
        color: #fff !important;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .navbar-brand:hover {
        color: #fff !important;
        opacity: 0.9;
    }

    .navbar-nav .nav-link {
        padding: 0.625rem 1rem;
        transition: all 0.2s;
        border-radius: 0.375rem;
        margin: 0 0.25rem;
        color: rgba(255, 255, 255, 0.9) !important;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 0.375rem;
    }

    .navbar-nav .nav-link:hover {
        background-color: rgba(255, 255, 255, 0.15);
        color: #fff !important;
    }

    .navbar-nav .nav-link.user-name {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 2rem;
        padding: 0.5rem 1rem;
        cursor: default;
    }

    .navbar-toggler {
        border-color: rgba(255, 255, 255, 0.3);
    }

    .navbar-toggler-icon {
        filter: brightness(0) invert(1);
    }

    main {
        flex: 1;
    }

    footer {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        border-top: 1px solid #e2e8f0;
        padding: 1.5rem 0;
    }

    footer .footer-text {
        color: #64748b;
        font-size: 0.875rem;
        margin: 0;
    }

    footer .footer-link {
        color: #667eea;
        text-decoration: none;
        font-weight: 600;
    }

    footer .footer-link:hover {
        text-decoration: underline;
    }

    @@media (max-width: 62rem) {
        .navbar-nav {
            margin-top: 1rem;
            padding: 1rem 0;
        }

        .navbar-nav .nav-link {
            margin: 0.25rem 0;
        }
    }
</style>

<div class="layout-wrapper">
    <!-- Navigation Bar -->
    <nav class="navbar navbar-expand-lg navbar-dark top-navbar">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <i class="bi bi-calendar-check"></i>
                Event Scheduler
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/" aria-label="Home">
                            <i class="bi bi-house-door"></i> Home
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/public-events" aria-label="Public Events">
                            <i class="bi bi-globe"></i> Public Events
                        </a>
                    </li>
                    @if (isAuthenticated)
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="/calendar-view" aria-label="Calendar View">
                                <i class="bi bi-calendar3"></i> Calendar
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/calendar-list" aria-label="Event List">
                                <i class="bi bi-list-task"></i> Events
                            </a>
                        </li>
                        <li class="nav-item">
                            <span class="nav-link user-name" aria-label="Current user">
                                <i class="bi bi-person-circle"></i> @userName
                            </span>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/logout" aria-label="Logout">
                                <i class="bi bi-box-arrow-right"></i> Logout
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="/login" aria-label="Login">
                                <i class="bi bi-box-arrow-in-right"></i> Login
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/register" aria-label="Sign up">
                                <i class="bi bi-person-plus"></i> Sign Up
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main>
        @Body
    </main>

    <!-- Footer -->
    <footer>
        <div class="container text-center">
            <p class="footer-text">
                &copy; @DateTime.Now.Year Event Scheduler. Built with ❤️ using .NET 9.0 and Blazor Server. 
                <a href="https://github.com" class="footer-link" target="_blank" rel="noopener noreferrer">View on GitHub</a>
            </p>
        </div>
    </footer>
</div>

<!-- Blazor Error UI -->
<div id="blazor-error-ui" data-nosnippet>
    <div class="blazor-error-content">
        <i class="bi bi-exclamation-triangle"></i>
        An unhandled error has occurred.
        <a href="." class="reload">Reload</a>
        <span class="dismiss">🗙</span>
    </div>
</div>

<style>
    #blazor-error-ui {
        background: #fef2f2;
        border-top: 2px solid #ef4444;
        bottom: 0;
        box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.1);
        display: none;
        left: 0;
        padding: 1rem;
        position: fixed;
        width: 100%;
        z-index: 1001;
    }

    #blazor-error-ui .blazor-error-content {
        color: #991b1b;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
        font-weight: 500;
    }

    #blazor-error-ui .reload {
        color: #667eea;
        text-decoration: underline;
        font-weight: 600;
    }

    #blazor-error-ui .dismiss {
        cursor: pointer;
        font-size: 1.5rem;
        margin-left: auto;
        opacity: 0.7;
    }

    #blazor-error-ui .dismiss:hover {
        opacity: 1;
    }
</style>

<!-- Blazor Error UI -->
<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

<!-- Blazor Reconnection UI (built-in) -->
<div id="components-reconnect-modal" class="components-reconnect-hide" data-nosnippet>
    <div class="reconnect-overlay"></div>
    <div class="reconnect-modal">
        <div class="reconnect-content">
            <div class="reconnect-icon"></div>
            <div class="reconnect-status">
                <span class="reconnect-show">Reconnecting...</span>
                <span class="reconnect-failed">Connection failed. Refresh the page to restore functionality.</span>
                <span class="reconnect-rejected">Connection rejected. Please reload the page.</span>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isAuthenticated = false;
    private string userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        userName = user.Identity?.Name ?? string.Empty;
        
        // Subscribe to auth state changes
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        InvokeAsync(async () =>
        {
            var authState = await task;
            var user = authState.User;
            
            isAuthenticated = user.Identity?.IsAuthenticated ?? false;
            userName = user.Identity?.Name ?? string.Empty;
            
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
