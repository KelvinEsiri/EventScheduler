@page "/public-events"
@using EventScheduler.Application.DTOs.Response
@using EventScheduler.Web.Services
@rendermode InteractiveServer
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Public Events - Event Scheduler</PageTitle>

<div class="events-container">
    <!-- Header Section -->
    <div class="events-header">
        <div class="header-content">
            <div class="header-text">
                <div class="header-icon">
                    <i class="bi bi-globe"></i>
                </div>
                <div>
                    <h1 class="header-title">Public Events</h1>
                    <p class="header-subtitle">
                        Discover upcoming public events in the community
                    </p>
                </div>
            </div>
            <div class="header-actions">
                <a href="/login" class="btn btn-outline">
                    <i class="bi bi-box-arrow-in-right"></i>
                    <span>Login</span>
                </a>
                <a href="/register" class="btn btn-primary">
                    <i class="bi bi-person-plus"></i>
                    <span>Sign Up</span>
                </a>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="events-content">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner">
                    <div class="spinner"></div>
                </div>
                <div class="loading-text">
                    <h3>Loading Public Events</h3>
                    <p>Getting events ready for you...</p>
                </div>
            </div>
        }
        else if (events.Count == 0)
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="bi bi-calendar-x"></i>
                </div>
                <div class="empty-text">
                    <h3>No public events yet</h3>
                    <p>Check back later for upcoming public events!</p>
                </div>
            </div>
        }
        else
        {
            <!-- Filter Section -->
            <div class="filter-section">
                <div class="filter-row">
                    <div class="filter-item">
                        <label>Event Type</label>
                        <select @bind="selectedEventType" @bind:after="FilterEvents" class="form-select">
                            <option value="">All Types</option>
                            <option value="Festival">Festival</option>
                            <option value="Interview">Interview</option>
                            <option value="Birthday">Birthday</option>
                            <option value="Exam">Exam</option>
                            <option value="Appointment">Appointment</option>
                            <option value="Meeting">Meeting</option>
                            <option value="Reminder">Reminder</option>
                            <option value="Task">Task</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="filter-item">
                        <label>Search</label>
                        <input type="text" @bind="searchQuery" @bind:after="FilterEvents" 
                               class="form-control" placeholder="Search events..." />
                    </div>
                </div>
            </div>

            <div class="events-grid">
                @foreach (var evt in filteredEvents.OrderBy(e => e.StartDate))
                {
                    <div class="event-card @GetEventTypeClass(evt.EventType)" @onclick="() => ShowEventDetails(evt)">
                        <div class="event-card-header">
                            <div class="event-title-section">
                                <h3 class="event-title">@evt.Title</h3>
                                <div class="event-badges">
                                    <span class="badge badge-type">
                                        @GetEventTypeIcon(evt.EventType) @evt.EventType
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div class="event-card-body">
                            @if (!string.IsNullOrEmpty(evt.Description))
                            {
                                <p class="event-description">@evt.Description</p>
                            }

                            <div class="event-details">
                                <div class="event-detail-item">
                                    <i class="bi bi-calendar3"></i>
                                    <span>@evt.StartDate.ToString("MMM dd, yyyy")</span>
                                </div>

                                @if (!evt.IsAllDay)
                                {
                                    <div class="event-detail-item">
                                        <i class="bi bi-clock"></i>
                                        <span>@evt.StartDate.ToString("hh:mm tt") - @evt.EndDate.ToString("hh:mm tt")</span>
                                    </div>
                                }
                                else
                                {
                                    <div class="event-detail-item">
                                        <i class="bi bi-sun"></i>
                                        <span>All Day</span>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(evt.Location))
                                {
                                    <div class="event-detail-item">
                                        <i class="bi bi-geo-alt"></i>
                                        <span>@evt.Location</span>
                                    </div>
                                }

                                @if (evt.ParticipantsCount > 0)
                                {
                                    <div class="event-detail-item">
                                        <i class="bi bi-people"></i>
                                        <span>@evt.ParticipantsCount participant@(evt.ParticipantsCount == 1 ? "" : "s")</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- Event Details Modal -->
@if (selectedEvent != null)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h2>@selectedEvent.Title</h2>
                <button class="btn-close" @onclick="CloseModal">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="event-type-badge">
                    @GetEventTypeIcon(selectedEvent.EventType) @selectedEvent.EventType
                </div>
                
                @if (!string.IsNullOrEmpty(selectedEvent.Description))
                {
                    <p class="description">@selectedEvent.Description</p>
                }

                <div class="details-grid">
                    <div class="detail-row">
                        <strong><i class="bi bi-calendar3"></i> Date:</strong>
                        <span>@selectedEvent.StartDate.ToString("MMMM dd, yyyy")</span>
                    </div>

                    <div class="detail-row">
                        <strong><i class="bi bi-clock"></i> Time:</strong>
                        <span>
                            @if (selectedEvent.IsAllDay)
                            {
                                <text>All Day Event</text>
                            }
                            else
                            {
                                @selectedEvent.StartDate.ToString("hh:mm tt") <text> - </text> @selectedEvent.EndDate.ToString("hh:mm tt")
                            }
                        </span>
                    </div>

                    @if (!string.IsNullOrEmpty(selectedEvent.Location))
                    {
                        <div class="detail-row">
                            <strong><i class="bi bi-geo-alt"></i> Location:</strong>
                            <span>@selectedEvent.Location</span>
                        </div>
                    }

                    @if (selectedEvent.ParticipantsCount > 0)
                    {
                        <div class="detail-row">
                            <strong><i class="bi bi-people"></i> Participants:</strong>
                            <span>@selectedEvent.ParticipantsCount</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<EventResponse> events = new();
    private List<EventResponse> filteredEvents = new();
    private EventResponse? selectedEvent = null;
    private bool isLoading = true;
    private string selectedEventType = "";
    private string searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadPublicEvents();
    }

    private async Task LoadPublicEvents()
    {
        isLoading = true;
        try
        {
            var response = await ApiService.GetPublicEventsAsync();
            if (response != null)
            {
                events = response;
                filteredEvents = events;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading public events: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterEvents()
    {
        filteredEvents = events.Where(e =>
        {
            bool matchesType = string.IsNullOrEmpty(selectedEventType) || e.EventType == selectedEventType;
            bool matchesSearch = string.IsNullOrEmpty(searchQuery) ||
                                e.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                (e.Description?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false);
            return matchesType && matchesSearch;
        }).ToList();
    }

    private void ShowEventDetails(EventResponse evt)
    {
        selectedEvent = evt;
    }

    private void CloseModal()
    {
        selectedEvent = null;
    }

    private string GetEventTypeClass(string eventType)
    {
        return eventType.ToLower() switch
        {
            "festival" => "event-type-festival",
            "interview" => "event-type-interview",
            "birthday" => "event-type-birthday",
            "exam" => "event-type-exam",
            "appointment" => "event-type-appointment",
            "meeting" => "event-type-meeting",
            _ => "event-type-other"
        };
    }

    private string GetEventTypeIcon(string eventType)
    {
        return eventType.ToLower() switch
        {
            "festival" => "🎉",
            "interview" => "💼",
            "birthday" => "🎂",
            "exam" => "📝",
            "appointment" => "🏥",
            "meeting" => "👥",
            "reminder" => "⏰",
            "task" => "✅",
            _ => "📅"
        };
    }
}

<style>
    .events-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 1rem;
    }

    .events-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 12px;
        margin-bottom: 1.5rem;
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .header-text {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .header-icon i {
        font-size: 2.5rem;
    }

    .header-title {
        font-size: 1.8rem;
        margin: 0;
        font-weight: 600;
    }

    .header-subtitle {
        margin: 0.25rem 0 0 0;
        opacity: 0.95;
        font-size: 0.95rem;
    }

    .header-actions {
        display: flex;
        gap: 0.75rem;
    }

    .filter-section {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .filter-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
    }

    .filter-item label {
        display: block;
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: #374151;
    }

    .events-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 1.25rem;
    }

    .event-card {
        background: white;
        border-radius: 10px;
        padding: 1.25rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        transition: all 0.2s;
        cursor: pointer;
        border-left: 4px solid #667eea;
    }

    .event-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 4px 16px rgba(0,0,0,0.12);
    }

    .event-type-festival { border-left-color: #f59e0b; }
    .event-type-interview { border-left-color: #3b82f6; }
    .event-type-birthday { border-left-color: #ec4899; }
    .event-type-exam { border-left-color: #8b5cf6; }
    .event-type-appointment { border-left-color: #10b981; }
    .event-type-meeting { border-left-color: #6366f1; }

    .event-title {
        font-size: 1.2rem;
        margin: 0 0 0.5rem 0;
        color: #1f2937;
    }

    .event-badges {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .badge-type {
        font-size: 0.8rem;
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        background: #e5e7eb;
        color: #374151;
    }

    .event-description {
        color: #6b7280;
        margin: 0.75rem 0;
        line-height: 1.5;
    }

    .event-details {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .event-detail-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6b7280;
        font-size: 0.9rem;
    }

    .event-detail-item i {
        color: #667eea;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        border-radius: 12px;
        max-width: 600px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-header {
        padding: 1.5rem;
        border-bottom: 1px solid #e5e7eb;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h2 {
        margin: 0;
        font-size: 1.5rem;
    }

    .btn-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0.5rem;
        line-height: 1;
        color: #6b7280;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .event-type-badge {
        display: inline-block;
        padding: 0.5rem 1rem;
        background: #f3f4f6;
        border-radius: 8px;
        margin-bottom: 1rem;
        font-size: 0.9rem;
    }

    .description {
        color: #4b5563;
        line-height: 1.6;
        margin-bottom: 1.5rem;
    }

    .details-grid {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .detail-row {
        display: flex;
        gap: 0.75rem;
        align-items: center;
    }

    .detail-row strong {
        color: #374151;
        min-width: 120px;
    }

    .detail-row i {
        color: #667eea;
        margin-right: 0.25rem;
    }

    .loading-container, .empty-state {
        text-align: center;
        padding: 3rem;
    }

    .spinner {
        border: 4px solid #f3f4f6;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .empty-icon i {
        font-size: 4rem;
        color: #d1d5db;
    }

    @@media (max-width: 768px) {
        .header-content {
            flex-direction: column;
            align-items: flex-start;
        }

        .filter-row {
            grid-template-columns: 1fr;
        }

        .events-grid {
            grid-template-columns: 1fr;
        }
    }
</style>
