@page "/public-events"
@rendermode InteractiveServer

<PageTitle>Public Events - Event Scheduler</PageTitle>

<link rel="stylesheet" href="/css/calendar.css" />

<div class="events-container">
    <!-- Header Section -->
    <div class="calendar-header">
        <div class="header-content">
            <div class="header-text">
                <div class="header-icon">
                    <i class="bi bi-globe"></i>
                </div>
                <div>
                    <h1 class="header-title">Public Events</h1>
                    <p class="header-subtitle">
                        Discover upcoming public events in the community
                    </p>
                </div>
            </div>
            <div class="header-actions">
                @if (!string.IsNullOrEmpty(connectionStatus))
                {
                    <div class="connection-indicator @(isConnected ? "connected" : "disconnected")" title="@connectionStatus">
                        <i class="bi bi-@(isConnected ? "wifi" : "wifi-off")"></i>
                    </div>
                }
                @* @if (!isAuthenticated)
                {
                    <a href="/login" class="btn btn-outline">
                        <i class="bi bi-box-arrow-in-right"></i>
                        <span>Login</span>
                    </a>
                    <a href="/register" class="btn btn-primary">
                        <i class="bi bi-person-plus"></i>
                        <span>Sign Up</span>
                    </a>
                }
                else
                {
                    <a href="/calendar-view" class="btn btn-outline">
                        <i class="bi bi-calendar-heart"></i>
                        <span>My Calendar</span>
                    </a>
                } *@
            </div>
        </div>
    </div>

    <!-- View Toggle -->
    <div class="view-toggle-container">
        <div class="view-toggle">
            <button class="toggle-btn @(viewMode == ViewMode.Calendar ? "active" : "")" @onclick="() => SetViewMode(ViewMode.Calendar)">
                <i class="bi bi-calendar3"></i>
                <span>Calendar View</span>
            </button>
            <button class="toggle-btn @(viewMode == ViewMode.List ? "active" : "")" @onclick="() => SetViewMode(ViewMode.List)">
                <i class="bi bi-list-ul"></i>
                <span>List View</span>
            </button>
        </div>
    </div>

    <!-- Main Content -->
    <div class="events-content">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner">
                    <div class="spinner"></div>
                </div>
                <div class="loading-text">
                    <h3>@(isConnected ? "Loading Public Events" : "Attempting to reconnect to the server...")</h3>
                    <p>@(isConnected ? "Getting events ready for you..." : "Please wait while we restore your connection")</p>
                </div>
            </div>
        }
        else
        {
            @if (viewMode == ViewMode.Calendar)
            {
                <!-- Calendar View - Always show calendar -->
                <div class="calendar-card">
                    <div class="calendar-card-body">
                        <div id="public-calendar"></div>
                    </div>
                </div>
            }
            else
            {
                <!-- List View -->
                @if (events.Count == 0)
                {
                    <div class="empty-state">
                        <div class="empty-icon">
                            <i class="bi bi-calendar-x"></i>
                        </div>
                        <div class="empty-text">
                            <h3>No public events yet</h3>
                            <p>Check back later for upcoming public events!</p>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Filter Section -->
                    <div class="filter-section">
                        <div class="filter-row">
                            <div class="filter-item">
                                <label><i class="bi bi-tag"></i> Event Type</label>
                                <select @bind="selectedEventType" @bind:after="FilterEvents" class="form-select">
                                    <option value="">All Types</option>
                                    <option value="Festival">üéâ Festival</option>
                                    <option value="Interview">üíº Interview</option>
                                    <option value="Birthday">üéÇ Birthday</option>
                                    <option value="Exam">üìù Exam</option>
                                    <option value="Appointment">üè• Appointment</option>
                                    <option value="Meeting">üë• Meeting</option>
                                    <option value="Reminder">‚è∞ Reminder</option>
                                    <option value="Task">‚úÖ Task</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="filter-item">
                                <label><i class="bi bi-search"></i> Search</label>
                                <input type="text" @bind="searchQuery" @bind:after="FilterEvents" 
                                       class="form-control" placeholder="Search events..." />
                            </div>
                        </div>
                    </div>

                    <!-- List View -->
                    <div class="events-grid">
                        @foreach (var evt in filteredEvents.OrderBy(e => e.StartDate))
                        {
                        <div class="event-card @UIHelper.GetEventTypeClass(evt.EventType)" @onclick="() => ShowEventDetails(evt)">
                            <div class="event-card-header">
                                <div class="event-title-section">
                                    <h3 class="event-title">@evt.Title</h3>
                                    <div class="event-badges">
                                        <span class="badge badge-type">
                                            @UIHelper.GetEventTypeIcon(evt.EventType) @evt.EventType
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <div class="event-card-body">
                                @if (!string.IsNullOrEmpty(evt.Description))
                                {
                                    <p class="event-description">@evt.Description</p>
                                }

                                <div class="event-details">
                                    <div class="event-detail-item">
                                        <i class="bi bi-calendar3"></i>
                                        <span>@evt.StartDate.ToString("MMM dd, yyyy")</span>
                                    </div>

                                    @if (!evt.IsAllDay)
                                    {
                                        <div class="event-detail-item">
                                            <i class="bi bi-clock"></i>
                                            <span>@evt.StartDate.ToString("hh:mm tt") - @evt.EndDate.ToString("hh:mm tt")</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="event-detail-item">
                                            <i class="bi bi-sun"></i>
                                            <span>All Day</span>
                                        </div>
                                    }

                                    @if (!string.IsNullOrEmpty(evt.Location))
                                    {
                                        <div class="event-detail-item">
                                            <i class="bi bi-geo-alt"></i>
                                            <span>@evt.Location</span>
                                        </div>
                                    }

                                    @if (!string.IsNullOrEmpty(evt.CreatedByUserName))
                                    {
                                        <div class="event-detail-item">
                                            <i class="bi bi-person-circle"></i>
                                            <span>Created by @evt.CreatedByUserName</span>
                                        </div>
                                    }

                                    @if (evt.ParticipantsCount > 0)
                                    {
                                        <div class="event-detail-item">
                                            <i class="bi bi-people"></i>
                                            <span>@evt.ParticipantsCount participant@(evt.ParticipantsCount == 1 ? "" : "s")</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
                }
            }
        }
    </div>
</div>

<!-- Event Details Modal -->
@if (selectedEvent != null)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h2>@selectedEvent.Title</h2>
                <button class="btn-close" @onclick="CloseModal">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="event-type-badge">
                    @UIHelper.GetEventTypeIcon(selectedEvent.EventType) @selectedEvent.EventType
                </div>
                
                @if (!string.IsNullOrEmpty(selectedEvent.Description))
                {
                    <p class="description">@selectedEvent.Description</p>
                }

                <div class="details-grid">
                    <div class="detail-row">
                        <strong><i class="bi bi-calendar3"></i> Date:</strong>
                        <span>@selectedEvent.StartDate.ToString("MMMM dd, yyyy")</span>
                    </div>

                    <div class="detail-row">
                        <strong><i class="bi bi-clock"></i> Time:</strong>
                        <span>
                            @if (selectedEvent.IsAllDay)
                            {
                                <text>All Day Event</text>
                            }
                            else
                            {
                                @selectedEvent.StartDate.ToString("hh:mm tt") <text> - </text> @selectedEvent.EndDate.ToString("hh:mm tt")
                            }
                        </span>
                    </div>

                    @if (!string.IsNullOrEmpty(selectedEvent.Location))
                    {
                        <div class="detail-row">
                            <strong><i class="bi bi-geo-alt"></i> Location:</strong>
                            <span>@selectedEvent.Location</span>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(selectedEvent.CreatedByUserName))
                    {
                        <div class="detail-row">
                            <strong><i class="bi bi-person-circle"></i> Created By:</strong>
                            <span>@selectedEvent.CreatedByUserName</span>
                        </div>
                    }

                    @if (selectedEvent.ParticipantsCount > 0)
                    {
                        <div class="detail-row">
                            <strong><i class="bi bi-people"></i> Participants:</strong>
                            <span>@selectedEvent.ParticipantsCount</span>
                        </div>
                    }

                    @if (selectedEvent.Attendees != null && selectedEvent.Attendees.Any())
                    {
                        <div class="detail-row" style="flex-direction: column; align-items: flex-start; gap: 0.5rem;">
                            <strong><i class="bi bi-people-fill"></i> Attendees:</strong>
                            <div style="display: flex; flex-direction: column; gap: 0.25rem; width: 100%;">
                                @foreach (var attendee in selectedEvent.Attendees.OrderBy(a => a.JoinedAt))
                                {
                                    <div style="display: flex; align-items: center; gap: 0.5rem; padding: 0.25rem; border-radius: 0.25rem; background: rgba(99, 102, 241, 0.05);">
                                        <i class="bi bi-person-check-fill" style="color: #10b981;"></i>
                                        <span style="font-weight: 500;">@attendee.UserName</span>
                                        <span style="color: #6b7280; font-size: 0.875rem;">‚Ä¢ Joined @attendee.JoinedAt.ToString("MMM dd, yyyy")</span>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>

                <div class="modal-actions" style="margin-top: 1.5rem; display: flex; gap: 0.75rem; justify-content: flex-end;">
                    @if (isAuthenticated && selectedEvent.UserId == currentUserId)
                    {
                        <div style="display: flex; align-items: center; gap: 0.5rem; color: #6b7280; font-size: 0.875rem;">
                            <i class="bi bi-info-circle"></i>
                            <span>This is your event</span>
                        </div>
                    }
                    else if (isAuthenticated && IsUserJoined(selectedEvent))
                    {
                        <button class="btn btn-outline" @onclick="async () => await LeaveEvent(selectedEvent.Id)" disabled="@isProcessing">
                            <i class="bi bi-box-arrow-right"></i>
                            @(isProcessing ? "Leaving..." : "Leave Event")
                        </button>
                    }
                    else if (isAuthenticated)
                    {
                        <button class="btn btn-primary" @onclick="async () => await JoinEvent(selectedEvent.Id)" disabled="@isProcessing">
                            <i class="bi bi-person-plus"></i>
                            @(isProcessing ? "Joining..." : "Join Event")
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary" @onclick="RedirectToLogin">
                            <i class="bi bi-box-arrow-in-right"></i>
                            Sign in to Join
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- ============================================
     ‚úÖ All styles moved to: wwwroot/css/pages/public-events.css
     This includes: connection indicator, view toggle, calendar card, filters, event cards, modals, and responsive design
     ============================================ -->


