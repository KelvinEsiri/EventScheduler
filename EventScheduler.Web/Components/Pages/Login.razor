@page "/login"
@using EventScheduler.Application.DTOs.Request
@using EventScheduler.Web.Services
@inject ApiService ApiService
@inject AuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ILogger<Login> Logger
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Login - Event Scheduler</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Login to Event Scheduler</h3>
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    <EditForm Model="@loginRequest" OnValidSubmit="@HandleLogin" FormName="loginForm">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" class="form-control" @bind-Value="loginRequest.Username" />
                            <ValidationMessage For="@(() => loginRequest.Username)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" />
                            <ValidationMessage For="@(() => loginRequest.Password)" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Login
                            </button>
                        </div>
                    </EditForm>

                    <hr class="my-4" />

                    <div class="text-center">
                        <p class="mb-0">Don't have an account? <a href="/register">Sign up</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginRequest loginRequest { get; set; } = new() { Username = "", Password = "" };
    
    private string? errorMessage;
    private bool isLoading = false;
    private bool shouldRedirect = false;
    private string? authUsername;
    private string? authEmail;
    private int authUserId;
    private string? authToken;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync called. FirstRender: {FirstRender}, ShouldRedirect: {ShouldRedirect}", firstRender, shouldRedirect);
        
        if (shouldRedirect && !string.IsNullOrEmpty(authToken))
        {
            // Reset flag to prevent multiple redirects
            shouldRedirect = false;
            
            try
            {
                Logger.LogInformation("Storing auth data in localStorage and redirecting");
                
                // Store in localStorage
                await JSRuntime.InvokeVoidAsync("authHelper.setAuthData", 
                    authUsername, authEmail, authUserId, authToken);
                
                Logger.LogInformation("Auth data stored, now navigating");
                
                // Navigate to interactive calendar view
                await JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/calendar-view';");
                
                Logger.LogInformation("Navigation command sent");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error during redirect");
                errorMessage = $"Redirect failed: {ex.Message}";
                StateHasChanged();
            }
        }
    }

    private async Task HandleLogin()
    {
        // Prevent double submission
        if (isLoading) return;
        
        try
        {
            Logger.LogInformation("Login attempt started for user: {Username}", loginRequest.Username);
            isLoading = true;
            errorMessage = null;

            var response = await ApiService.LoginAsync(loginRequest);
            Logger.LogInformation("Login response received. Response is null: {IsNull}", response == null);
            
            if (response != null)
            {
                Logger.LogInformation("Setting authentication for user: {Username}", response.Username);
                
                // Store auth data temporarily
                authUsername = response.Username;
                authEmail = response.Email;
                authUserId = response.UserId;
                authToken = response.Token;
                
                // Set in memory for immediate use
                AuthStateProvider.SetAuthentication(response.Username, response.Email, response.UserId, response.Token);
                ApiService.SetToken(response.Token);
                
                // Set flag to redirect in OnAfterRenderAsync
                shouldRedirect = true;
                
                Logger.LogInformation("Triggering state change");
                StateHasChanged();
            }
            else
            {
                Logger.LogWarning("Login response was null");
                errorMessage = "Login failed. Please try again.";
            }
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError(ex, "HTTP request exception during login");
            errorMessage = $"Unable to connect to server. Please make sure the API is running. Error: {ex.Message}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception during login");
            errorMessage = $"Login error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            Logger.LogInformation("Login attempt completed. Loading: {IsLoading}", isLoading);
        }
    }
}
