@page "/login"
@using EventScheduler.Application.DTOs.Request
@using EventScheduler.Web.Services
@inject ApiService ApiService
@inject AuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Login - Event Scheduler</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Login to Event Scheduler</h3>
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    <EditForm Model="@loginRequest" OnValidSubmit="@HandleLogin">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" class="form-control" @bind-Value="loginRequest.Username" />
                            <ValidationMessage For="@(() => loginRequest.Username)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" />
                            <ValidationMessage For="@(() => loginRequest.Password)" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Login
                            </button>
                        </div>
                    </EditForm>

                    <hr class="my-4" />

                    <div class="text-center">
                        <p class="mb-0">Don't have an account? <a href="/register">Register here</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new() { Username = "", Password = "" };
    private string? errorMessage;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var response = await ApiService.LoginAsync(loginRequest);
            
            if (response != null)
            {
                AuthStateProvider.SetAuthentication(response.Username, response.Email, response.UserId, response.Token);
                ApiService.SetToken(response.Token);
                NavigationManager.NavigateTo("/calendar");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Invalid username or password";
        }
        finally
        {
            isLoading = false;
        }
    }
}
