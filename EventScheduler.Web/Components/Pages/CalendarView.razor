@page "/calendar-view"
@rendermode InteractiveServer
@using EventScheduler.Application.DTOs.Request
@using EventScheduler.Application.DTOs.Response

<PageTitle>Calendar View - Event Scheduler</PageTitle>
<link rel="stylesheet" href="/css/calendar.css" />

<div class="events-container">
    <!-- Header Section -->
    <div class="calendar-header">
        <div class="header-content">
            <div class="header-text">
                <div class="header-icon">
                    <i class="bi bi-calendar-heart"></i>
                </div>
                <div>
                    <h1 class="header-title">Event Calendar</h1>
                    <p class="header-subtitle">
                        Manage your schedule with ease. Click dates to create events, click events to edit.
                    </p>
                </div>
            </div>
            <div class="header-actions">
                @if (!string.IsNullOrEmpty(connectionStatus))
                {
                    <div class="connection-indicator @(isConnected ? "connected" : "disconnected")" title="@connectionStatus">
                        <i class="bi bi-@(isConnected ? "wifi" : "wifi-off")"></i>
                    </div>
                }
                <a href="/calendar-list" class="btn btn-outline">
                    <i class="bi bi-list-task"></i>
                    <span>List View</span>
                </a>
                <button class="btn btn-primary" @onclick="ShowCreateModal">
                    <i class="bi bi-plus-lg"></i>
                    <span>New Event</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="events-content">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner">
                    <div class="spinner"></div>
                </div>
                <div class="loading-text">
                    <h3>@(isConnected ? "Loading Your Calendar" : "Attempting to reconnect to the server...")</h3>
                    <p>@(isConnected ? "Getting your events ready..." : "Please wait while we restore your connection")</p>
                </div>
            </div>
        }
        else
        {
            <!-- Calendar View - Same as Public Events -->
            <div class="calendar-card">
                <div class="calendar-card-body">
                    <div id="calendar"></div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Create/Edit Event Modal -->
@if (showModal)
{
    <div class="modal-overlay">
        <div class="modal-container compact-modal">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                    <div class="modal-title">
                        <div class="modal-icon">
                            <i class="bi bi-@(isEditMode ? "pencil-square" : "plus-circle")"></i>
                        </div>
                        <div>
                            <h3>@(isEditMode ? "Edit Event" : "Create New Event")</h3>
                            <p>@(isEditMode ? "Update your event details" : "Add a new event to your calendar")</p>
                        </div>
                    </div>
                    <button class="modal-close" @onclick="CloseModal">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>

                <!-- Modal Body -->
                <div class="modal-body">
                    <EditForm Model="@eventRequest" OnValidSubmit="@SaveEvent">
                        <DataAnnotationsValidator />
                        
                        <div class="form-grid compact-grid">
                            <!-- Title -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-type"></i>
                                    Event Title
                                    <span class="required">*</span>
                                </label>
                                <InputText class="form-control" @bind-Value="eventRequest.Title" 
                                         placeholder="What's the event about?" />
                                <ValidationMessage For="@(() => eventRequest.Title)" />
                            </div>

                            <!-- Date & Time -->
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="bi bi-clock"></i>
                                    Start
                                    <span class="required">*</span>
                                </label>
                                <InputDate Type="InputDateType.DateTimeLocal" class="form-control" 
                                         @bind-Value="eventRequest.StartDate" />
                            </div>

                            <div class="form-group">
                                <label class="form-label">
                                    <i class="bi bi-clock-fill"></i>
                                    End
                                    <span class="required">*</span>
                                </label>
                                <InputDate Type="InputDateType.DateTimeLocal" class="form-control" 
                                         @bind-Value="eventRequest.EndDate" />
                            </div>

                            <!-- Description -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-text-paragraph"></i>
                                    Description
                                </label>
                                <InputTextArea class="form-control compact-textarea" rows="2" @bind-Value="eventRequest.Description" 
                                             placeholder="Add some details about your event (optional)" />
                            </div>

                            <!-- Location -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-geo-alt"></i>
                                    Location
                                </label>
                                <InputText class="form-control" @bind-Value="eventRequest.Location" 
                                         placeholder="Where will this event take place? (optional)" />
                            </div>

                            <!-- Event Type -->
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="bi bi-tag"></i>
                                    Type
                                </label>
                                <InputSelect class="form-control" @bind-Value="eventRequest.EventType">
                                    <option value="Other">Other</option>
                                    <option value="Festival">üéâ Festival</option>
                                    <option value="Interview">üíº Interview</option>
                                    <option value="Birthday">üéÇ Birthday</option>
                                    <option value="Exam">üìù Exam</option>
                                    <option value="Appointment">üè• Appointment</option>
                                    <option value="Meeting">üë• Meeting</option>
                                    <option value="Reminder">‚è∞ Reminder</option>
                                    <option value="Task">‚úÖ Task</option>
                                </InputSelect>
                            </div>

                            <!-- Quick Toggles -->
                            <div class="form-group full-width">
                                <div class="toggle-row">
                                    <div class="toggle-group compact-toggle">
                                        <InputCheckbox class="toggle-input" id="isAllDay" @bind-Value="eventRequest.IsAllDay" />
                                        <label class="toggle-label" for="isAllDay">
                                            <div class="toggle-slider"></div>
                                            <span class="toggle-text">
                                                <i class="bi bi-sun"></i>
                                                All Day
                                            </span>
                                        </label>
                                    </div>
                                    
                                    <div class="toggle-group compact-toggle">
                                        <InputCheckbox class="toggle-input" id="isPublic" @bind-Value="eventRequest.IsPublic" />
                                        <label class="toggle-label" for="isPublic">
                                            <div class="toggle-slider"></div>
                                            <span class="toggle-text">
                                                <i class="bi bi-globe"></i>
                                                Public
                                            </span>
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <!-- Invitations -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-people"></i>
                                    Invitations (Optional)
                                </label>
                                @if (eventRequest.Invitations == null)
                                {
                                    eventRequest.Invitations = new List<EventInvitationRequest>();
                                }
                                @foreach (var invitation in eventRequest.Invitations.ToList())
                                {
                                    <div class="invitation-row compact-invitation">
                                        <input type="text" class="form-control" placeholder="Name" @bind="invitation.InviteeName" />
                                        <input type="email" class="form-control" placeholder="Email" @bind="invitation.InviteeEmail" />
                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => eventRequest.Invitations.Remove(invitation)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                }
                                <button type="button" class="btn btn-sm btn-outline-primary" @onclick="AddInvitation">
                                    <i class="bi bi-plus"></i> Add Invitation
                                </button>
                            </div>
                        </div>

                        <!-- Modal Footer -->
                        <div class="modal-footer compact-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                                <i class="bi bi-x-circle"></i>
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-small"></span>
                                }
                                <i class="bi bi-@(isEditMode ? "check2" : "plus-lg")"></i>
                                @(isEditMode ? "Update" : "Create")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Event Details Modal -->
@if (showDetailsModal && selectedEvent != null)
{
    <div class="modal-overlay">
        <div class="modal-container compact-modal">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                    <div class="modal-title">
                        <div class="modal-icon">
                            <i class="bi bi-calendar-event"></i>
                        </div>
                        <div>
                            <h3>@selectedEvent.Title</h3>
                            <p>Event Details</p>
                        </div>
                    </div>
                    <button class="modal-close" @onclick="CloseDetailsModal">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>

                <!-- Modal Body -->
                <div class="modal-body">
                    <div class="event-details-grid compact-details">
                        @if (!string.IsNullOrEmpty(selectedEvent.Description))
                        {
                            <div class="detail-section">
                                <label class="detail-label">
                                    <i class="bi bi-text-paragraph"></i>
                                    Description
                                </label>
                                <p class="detail-text">@selectedEvent.Description</p>
                            </div>
                        }

                        <div class="detail-section">
                            <label class="detail-label">
                                <i class="bi bi-calendar"></i>
                                Date & Time
                            </label>
                            <p class="detail-text">
                                @selectedEvent.StartDate.ToString("MMM dd, yyyy")
                                @if (!selectedEvent.IsAllDay)
                                {
                                    <text> at @selectedEvent.StartDate.ToString("hh:mm tt") - @selectedEvent.EndDate.ToString("hh:mm tt")</text>
                                }
                                else
                                {
                                    <text> (All Day)</text>
                                }
                            </p>
                        </div>

                        @if (!string.IsNullOrEmpty(selectedEvent.Location))
                        {
                            <div class="detail-section">
                                <label class="detail-label">
                                    <i class="bi bi-geo-alt"></i>
                                    Location
                                </label>
                                <p class="detail-text">@selectedEvent.Location</p>
                            </div>
                        }

                        <div class="detail-section">
                            <label class="detail-label">
                                <i class="bi bi-tag"></i>
                                Type & Status
                            </label>
                            <div class="badges-container">
                                <span class="detail-badge">@UIHelper.GetEventTypeIcon(selectedEvent.EventType) @selectedEvent.EventType</span>
                                <span class="detail-badge status-badge-@selectedEvent.Status.ToLower()">@selectedEvent.Status</span>
                                @if (selectedEvent.IsPublic)
                                {
                                    <span class="detail-badge public-badge">
                                        <i class="bi bi-globe"></i> Public
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal Footer -->
                <div class="modal-footer compact-footer">
                    @if (isUserOrganizer)
                    {
                        <button class="btn btn-secondary" @onclick="() => EditEventFromDetails(selectedEvent)">
                            <i class="bi bi-pencil"></i>
                            Edit
                        </button>
                        <button class="btn btn-danger" @onclick="() => DeleteEventFromDetails(selectedEvent.Id)">
                            <i class="bi bi-trash"></i>
                            Delete
                        </button>
                    }
                    else if (selectedEvent.IsPublic && !isUserParticipant)
                    {
                        <button class="btn btn-primary" @onclick="JoinEvent">
                            <i class="bi bi-person-plus"></i>
                            Join
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Day Events Modal -->
@if (showDayEventsModal && selectedDate.HasValue)
{
    <div class="modal-overlay">
        <div class="modal-container day-events-modal">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                    <div class="modal-title">
                        <div class="modal-icon">
                            <i class="bi bi-calendar-day"></i>
                        </div>
                        <div>
                            <h3>@selectedDate.Value.ToString("MMMM dd, yyyy")</h3>
                            <p>@(dayEvents.Count) event@(dayEvents.Count != 1 ? "s" : "") scheduled</p>
                        </div>
                    </div>
                    <button class="modal-close" @onclick="CloseDayEventsModal">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>

                <!-- Modal Body -->
                <div class="modal-body day-events-body">
                    @if (dayEvents.Any())
                    {
                        <div class="day-events-list">
                            @foreach (var evt in dayEvents)
                            {
                                <div class="day-event-card" @onclick="async () => await ShowEventDetailsFromDayList(evt)">
                                    <div class="event-card-header" data-color="@(evt.Color ?? "#3788d8")" style="--event-color: @(evt.Color ?? "#3788d8")">
                                        <div class="event-time">
                                            @if (evt.IsAllDay)
                                            {
                                                <i class="bi bi-calendar-check"></i>
                                                <span>All Day</span>
                                            }
                                            else
                                            {
                                                <i class="bi bi-clock"></i>
                                                <span>@evt.StartDate.ToString("hh:mm tt") - @evt.EndDate.ToString("hh:mm tt")</span>
                                            }
                                        </div>
                                    </div>
                                    <div class="event-card-body">
                                        <h4>@evt.Title</h4>
                                        @if (!string.IsNullOrEmpty(evt.Description))
                                        {
                                            <p class="event-description">@evt.Description</p>
                                        }
                                        @if (!string.IsNullOrEmpty(evt.Location))
                                        {
                                            <p class="event-location">
                                                <i class="bi bi-geo-alt"></i>
                                                @evt.Location
                                            </p>
                                        }
                                        <div class="event-badges">
                                            <span class="badge badge-@evt.EventType.ToLower()">
                                                @UIHelper.GetEventTypeIcon(evt.EventType) @evt.EventType
                                            </span>
                                            <span class="badge badge-status-@evt.Status.ToLower()">
                                                @evt.Status
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="no-events-message">
                            <i class="bi bi-calendar-x"></i>
                            <p>No events scheduled for this day</p>
                            <button class="btn btn-primary" @onclick="TransitionToCreateEventModal">
                                <i class="bi bi-plus-circle"></i>
                                Add Event
                            </button>
                        </div>
                    }
                </div>

                <!-- Modal Footer -->
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="TransitionToCreateEventModal">
                        <i class="bi bi-plus-circle"></i>
                        Add Event to This Day
                    </button>
                    <button class="btn btn-outline" @onclick="CloseDayEventsModal">
                        <i class="bi bi-x-circle"></i>
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Toast Notifications -->
@if (!string.IsNullOrEmpty(successMessage))
{
    <ToastNotification title="Success" message="@successMessage" type="ToastNotification.ToastType.Success" OnClose="@(() => successMessage = null)" />
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <ToastNotification title="Error" message="@errorMessage" type="ToastNotification.ToastType.Error" OnClose="@(() => errorMessage = null)" />
}

<!-- CalendarView styles now in styles/components/connection-indicator.css, -->
