@page "/calendar-view"
@using EventScheduler.Application.DTOs.Request
@using EventScheduler.Application.DTOs.Response
@using EventScheduler.Domain.Entities
@using EventScheduler.Web.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@rendermode InteractiveServer
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<CalendarView> Logger
@implements IAsyncDisposable

<PageTitle>Calendar View - Event Scheduler</PageTitle>
<link rel="stylesheet" href="~/css/calendar-view.css" />

<div class="calendar-container">
    <!-- Header Section -->
    <div class="calendar-header">
        <div class="header-content">
            <div class="header-text">
                <div class="header-icon">
                    <i class="bi bi-calendar-heart"></i>
                </div>
                <div>
                    <h1 class="header-title">Event Calendar</h1>
                    <p class="header-subtitle">
                        Manage your schedule with ease. Click dates to create events, click events to edit, drag to reschedule.
                    </p>
                </div>
            </div>
            <div class="header-actions">
                @if (!string.IsNullOrEmpty(connectionStatus))
                {
                    <div class="connection-indicator @(isConnected ? "connected" : "disconnected")" title="@connectionStatus">
                        <i class="bi bi-@(isConnected ? "wifi" : "wifi-off")"></i>
                    </div>
                }
                <a href="/calendar-list" class="btn btn-outline btn-list">
                    <i class="bi bi-list-task"></i>
                    <span>List View</span>
                </a>
                <button class="btn btn-primary btn-create" @onclick="ShowCreateModal">
                    <i class="bi bi-plus-lg"></i>
                    <span>New Event</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Alert Messages -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <ToastNotification title="Error" message="@errorMessage" type="ToastNotification.ToastType.Error" OnClose="@(() => errorMessage = null)" />
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <ToastNotification title="Success" message="@successMessage" type="ToastNotification.ToastType.Success" OnClose="@(() => successMessage = null)" />
    }

    <!-- Main Content -->
    <div class="calendar-content">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner">
                    <div class="spinner"></div>
                </div>
                <div class="loading-text">
                    <h3>Loading Your Calendar</h3>
                    <p>Preparing your events and schedule...</p>
                </div>
            </div>
        }
        else
        {
            <div class="calendar-card compact">
                <div class="calendar-card-header">
                    <div class="calendar-info">
                        <i class="bi bi-info-circle"></i>
                        <span>Drag and drop events to reschedule them</span>
                    </div>
                </div>
                <div class="calendar-card-body">
                    <div id="calendar" class="compact-calendar"></div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Create/Edit Event Modal -->
@if (showModal)
{
    <div class="modal-overlay">
        <div class="modal-container compact-modal">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                    <div class="modal-title">
                        <div class="modal-icon">
                            <i class="bi bi-@(isEditMode ? "pencil-square" : "plus-circle")"></i>
                        </div>
                        <div>
                            <h3>@(isEditMode ? "Edit Event" : "Create New Event")</h3>
                            <p>@(isEditMode ? "Update your event details" : "Add a new event to your calendar")</p>
                        </div>
                    </div>
                    <button class="modal-close" @onclick="CloseModal">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>

                <!-- Modal Body -->
                <div class="modal-body">
                    <EditForm Model="@eventRequest" OnValidSubmit="@SaveEvent">
                        <DataAnnotationsValidator />
                        
                        <div class="form-grid compact-grid">
                            <!-- Title -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-type"></i>
                                    Event Title
                                    <span class="required">*</span>
                                </label>
                                <InputText class="form-control" @bind-Value="eventRequest.Title" 
                                         placeholder="What's the event about?" />
                                <ValidationMessage For="@(() => eventRequest.Title)" />
                            </div>

                            <!-- Date & Time -->
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="bi bi-clock"></i>
                                    Start
                                    <span class="required">*</span>
                                </label>
                                <InputDate Type="InputDateType.DateTimeLocal" class="form-control" 
                                         @bind-Value="eventRequest.StartDate" />
                            </div>

                            <div class="form-group">
                                <label class="form-label">
                                    <i class="bi bi-clock-fill"></i>
                                    End
                                    <span class="required">*</span>
                                </label>
                                <InputDate Type="InputDateType.DateTimeLocal" class="form-control" 
                                         @bind-Value="eventRequest.EndDate" />
                            </div>

                            <!-- Description -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-text-paragraph"></i>
                                    Description
                                </label>
                                <InputTextArea class="form-control compact-textarea" rows="2" @bind-Value="eventRequest.Description" 
                                             placeholder="Add some details about your event (optional)" />
                            </div>

                            <!-- Location -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-geo-alt"></i>
                                    Location
                                </label>
                                <InputText class="form-control" @bind-Value="eventRequest.Location" 
                                         placeholder="Where will this event take place? (optional)" />
                            </div>

                            <!-- Event Type -->
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="bi bi-tag"></i>
                                    Type
                                </label>
                                <InputSelect class="form-control" @bind-Value="eventRequest.EventType">
                                    <option value="Other">Other</option>
                                    <option value="Festival">üéâ Festival</option>
                                    <option value="Interview">üíº Interview</option>
                                    <option value="Birthday">üéÇ Birthday</option>
                                    <option value="Exam">üìù Exam</option>
                                    <option value="Appointment">üè• Appointment</option>
                                    <option value="Meeting">üë• Meeting</option>
                                    <option value="Reminder">‚è∞ Reminder</option>
                                    <option value="Task">‚úÖ Task</option>
                                </InputSelect>
                            </div>

                            <!-- Quick Toggles -->
                            <div class="form-group full-width">
                                <div class="toggle-row">
                                    <div class="toggle-group compact-toggle">
                                        <InputCheckbox class="toggle-input" id="isAllDay" @bind-Value="eventRequest.IsAllDay" />
                                        <label class="toggle-label" for="isAllDay">
                                            <div class="toggle-slider"></div>
                                            <span class="toggle-text">
                                                <i class="bi bi-sun"></i>
                                                All Day
                                            </span>
                                        </label>
                                    </div>
                                    
                                    <div class="toggle-group compact-toggle">
                                        <InputCheckbox class="toggle-input" id="isPublic" @bind-Value="eventRequest.IsPublic" />
                                        <label class="toggle-label" for="isPublic">
                                            <div class="toggle-slider"></div>
                                            <span class="toggle-text">
                                                <i class="bi bi-globe"></i>
                                                Public
                                            </span>
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <!-- Invitations -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-people"></i>
                                    Invitations (Optional)
                                </label>
                                @if (eventRequest.Invitations == null)
                                {
                                    eventRequest.Invitations = new List<EventInvitationRequest>();
                                }
                                @foreach (var invitation in eventRequest.Invitations.ToList())
                                {
                                    <div class="invitation-row compact-invitation">
                                        <input type="text" class="form-control" placeholder="Name" @bind="invitation.InviteeName" />
                                        <input type="email" class="form-control" placeholder="Email" @bind="invitation.InviteeEmail" />
                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => eventRequest.Invitations.Remove(invitation)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                }
                                <button type="button" class="btn btn-sm btn-outline-primary" @onclick="AddInvitation">
                                    <i class="bi bi-plus"></i> Add Invitation
                                </button>
                            </div>
                        </div>

                        <!-- Modal Footer -->
                        <div class="modal-footer compact-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                                <i class="bi bi-x-circle"></i>
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-small"></span>
                                }
                                <i class="bi bi-@(isEditMode ? "check2" : "plus-lg")"></i>
                                @(isEditMode ? "Update" : "Create")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Event Details Modal -->
@if (showDetailsModal && selectedEvent != null)
{
    <div class="modal-overlay">
        <div class="modal-container compact-modal">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                    <div class="modal-title">
                        <div class="modal-icon">
                            <i class="bi bi-calendar-event"></i>
                        </div>
                        <div>
                            <h3>@selectedEvent.Title</h3>
                            <p>Event Details</p>
                        </div>
                    </div>
                    <button class="modal-close" @onclick="CloseDetailsModal">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>

                <!-- Modal Body -->
                <div class="modal-body">
                    <div class="event-details-grid compact-details">
                        @if (!string.IsNullOrEmpty(selectedEvent.Description))
                        {
                            <div class="detail-section">
                                <label class="detail-label">
                                    <i class="bi bi-text-paragraph"></i>
                                    Description
                                </label>
                                <p class="detail-text">@selectedEvent.Description</p>
                            </div>
                        }

                        <div class="detail-section">
                            <label class="detail-label">
                                <i class="bi bi-calendar"></i>
                                Date & Time
                            </label>
                            <p class="detail-text">
                                @selectedEvent.StartDate.ToString("MMM dd, yyyy")
                                @if (!selectedEvent.IsAllDay)
                                {
                                    <text> at @selectedEvent.StartDate.ToString("hh:mm tt") - @selectedEvent.EndDate.ToString("hh:mm tt")</text>
                                }
                                else
                                {
                                    <text> (All Day)</text>
                                }
                            </p>
                        </div>

                        @if (!string.IsNullOrEmpty(selectedEvent.Location))
                        {
                            <div class="detail-section">
                                <label class="detail-label">
                                    <i class="bi bi-geo-alt"></i>
                                    Location
                                </label>
                                <p class="detail-text">@selectedEvent.Location</p>
                            </div>
                        }

                        <div class="detail-section">
                            <label class="detail-label">
                                <i class="bi bi-tag"></i>
                                Type & Status
                            </label>
                            <div class="badges-container">
                                <span class="detail-badge">@GetEventTypeIcon(selectedEvent.EventType) @selectedEvent.EventType</span>
                                <span class="detail-badge status-badge-@selectedEvent.Status.ToLower()">@selectedEvent.Status</span>
                                @if (selectedEvent.IsPublic)
                                {
                                    <span class="detail-badge public-badge">
                                        <i class="bi bi-globe"></i> Public
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal Footer -->
                <div class="modal-footer compact-footer">
                    @if (isUserOrganizer)
                    {
                        <button class="btn btn-secondary" @onclick="() => EditEventFromDetails(selectedEvent)">
                            <i class="bi bi-pencil"></i>
                            Edit
                        </button>
                        <button class="btn btn-danger" @onclick="() => DeleteEventFromDetails(selectedEvent.Id)">
                            <i class="bi bi-trash"></i>
                            Delete
                        </button>
                    }
                    else if (selectedEvent.IsPublic && !isUserParticipant)
                    {
                        <button class="btn btn-primary" @onclick="JoinEvent">
                            <i class="bi bi-person-plus"></i>
                            Join
                        </button>
                    }
                    <button class="btn btn-outline" @onclick="CloseDetailsModal">
                        <i class="bi bi-x-circle"></i>
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Day Events Modal -->
@if (showDayEventsModal && selectedDate.HasValue)
{
    <div class="modal-overlay">
        <div class="modal-container day-events-modal">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                    <div class="modal-title">
                        <div class="modal-icon">
                            <i class="bi bi-calendar-day"></i>
                        </div>
                        <div>
                            <h3>@selectedDate.Value.ToString("MMMM dd, yyyy")</h3>
                            <p>@(dayEvents.Count) event@(dayEvents.Count != 1 ? "s" : "") scheduled</p>
                        </div>
                    </div>
                    <button class="modal-close" @onclick="CloseDayEventsModal">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>

                <!-- Modal Body -->
                <div class="modal-body day-events-body">
                    @if (dayEvents.Any())
                    {
                        <div class="day-events-list">
                            @foreach (var evt in dayEvents)
                            {
                                <div class="day-event-card" @onclick="async () => await ShowEventDetailsFromDayList(evt)">
                                    <div class="event-card-header" data-color="@(evt.Color ?? "#3788d8")" style="--event-color: @(evt.Color ?? "#3788d8")">
                                        <div class="event-time">
                                            @if (evt.IsAllDay)
                                            {
                                                <i class="bi bi-calendar-check"></i>
                                                <span>All Day</span>
                                            }
                                            else
                                            {
                                                <i class="bi bi-clock"></i>
                                                <span>@evt.StartDate.ToString("hh:mm tt") - @evt.EndDate.ToString("hh:mm tt")</span>
                                            }
                                        </div>
                                    </div>
                                    <div class="event-card-body">
                                        <h4>@evt.Title</h4>
                                        @if (!string.IsNullOrEmpty(evt.Description))
                                        {
                                            <p class="event-description">@evt.Description</p>
                                        }
                                        @if (!string.IsNullOrEmpty(evt.Location))
                                        {
                                            <p class="event-location">
                                                <i class="bi bi-geo-alt"></i>
                                                @evt.Location
                                            </p>
                                        }
                                        <div class="event-badges">
                                            <span class="badge badge-@evt.EventType.ToLower()">
                                                @GetEventTypeIcon(evt.EventType) @evt.EventType
                                            </span>
                                            <span class="badge badge-status-@evt.Status.ToLower()">
                                                @evt.Status
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="no-events-message">
                            <i class="bi bi-calendar-x"></i>
                            <p>No events scheduled for this day</p>
                            <button class="btn btn-primary" @onclick="TransitionToCreateEventModal">
                                <i class="bi bi-plus-circle"></i>
                                Add Event
                            </button>
                        </div>
                    }
                </div>

                <!-- Modal Footer -->
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="TransitionToCreateEventModal">
                        <i class="bi bi-plus-circle"></i>
                        Add Event to This Day
                    </button>
                    <button class="btn btn-outline" @onclick="CloseDayEventsModal">
                        <i class="bi bi-x-circle"></i>
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // State management
    private List<EventResponse> events = new();
    private bool isLoading = false;
    private bool calendarInitialized = false;
    private DotNetObjectReference<CalendarView>? dotNetHelper;
    private bool hasCheckedAuth = false;
    private string? errorMessage;
    private string? successMessage;
    private int currentUserId = 0;
    
    // SignalR - Optimized connection management
    private HubConnection? hubConnection;
    private bool isConnected = false;
    private string? connectionStatus;
    private readonly HashSet<int> pendingLocalChanges = new();
    private DateTime? lastLocalOperationTime = null;
    
    // Modal state - Consolidated
    private bool showModal = false;
    private bool isEditMode = false;
    private int editEventId = 0;
    private bool isSaving = false;
    
    // Event details modal state
    private bool showDetailsModal = false;
    private EventResponse? selectedEvent = null;
    private bool isUserOrganizer = false;
    private bool isUserParticipant = false;
    
    // Day events modal state
    private bool showDayEventsModal = false;
    private DateTime? selectedDate = null;
    private List<EventResponse> dayEvents = new();
    
    // Form model
    private CreateEventRequest eventRequest = new CreateEventRequest
    {
        Title = "",
        StartDate = DateTime.Now,
        EndDate = DateTime.Now.AddHours(1)
    };

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("CalendarView: Initializing component");
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated != true)
        {
            Logger.LogWarning("CalendarView: User not authenticated yet");
            return;
        }
        
        hasCheckedAuth = true;
        
        // Extract and cache user ID
        if (int.TryParse(user.FindFirst("userId")?.Value, out int userId))
        {
            currentUserId = userId;
        }
        
        // Set API token
        var token = user.FindFirst("token")?.Value;
        if (!string.IsNullOrEmpty(token))
        {
            ApiService.SetToken(token);
            Logger.LogInformation("CalendarView: Authentication configured");
        }
        else
        {
            Logger.LogWarning("CalendarView: No authentication token found");
            return;
        }
        
        // Initialize in parallel for faster load
        await Task.WhenAll(
            InitializeSignalR(),
            LoadEvents()
        );
    }

    private async Task InitializeSignalR()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var token = authState.User.FindFirst("token")?.Value;
            
            if (string.IsNullOrEmpty(token))
            {
                connectionStatus = "Real-time updates unavailable";
                Logger.LogWarning("SignalR: No authentication token available");
                return;
            }
            
            var hubUrl = "http://localhost:5006/hubs/events";
            
            hubConnection = new HubConnectionBuilder()
                .WithUrl(hubUrl, options => {
                    options.AccessTokenProvider = () => Task.FromResult<string?>(token);
                })
                .WithAutomaticReconnect()
                .ConfigureLogging(logging => {
                    logging.SetMinimumLevel(LogLevel.Information);
                })
                .Build();

            // Connection lifecycle handlers
            hubConnection.Reconnecting += OnReconnecting;
            hubConnection.Reconnected += OnReconnected;
            hubConnection.Closed += OnClosed;

            // Register optimized event handlers
            RegisterSignalRHandlers();

            await hubConnection.StartAsync();
            
            isConnected = true;
            connectionStatus = "Connected to real-time updates";
            Logger.LogInformation("SignalR: Connected (Connection ID: {ConnectionId})", hubConnection.ConnectionId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "SignalR: Connection failed");
            connectionStatus = "Real-time updates unavailable";
            isConnected = false;
        }
    }

    private void RegisterSignalRHandlers()
    {
        if (hubConnection == null) return;

        // Optimized event created handler
        hubConnection.On<EventResponse>("EventCreated", async (eventData) => {
            await InvokeAsync(async () => {
                // Skip notification for local operations
                if (IsRecentLocalOperation())
                {
                    lastLocalOperationTime = null;
                }
                else
                {
                    ShowSuccess($"Event '{eventData.Title}' created!");
                }
                
                events.Add(eventData);
                await JSRuntime.InvokeVoidAsync("addEventToCalendar", eventData);
                StateHasChanged();
            });
        });

        // Optimized event updated handler
        hubConnection.On<EventResponse>("EventUpdated", async (eventData) => {
            await InvokeAsync(async () => {
                if (!pendingLocalChanges.Remove(eventData.Id))
                {
                    ShowSuccess($"Event '{eventData.Title}' updated!");
                }
                
                UpdateEventInList(eventData);
                await JSRuntime.InvokeVoidAsync("updateEventInCalendar", eventData);
                StateHasChanged();
            });
        });

        // Optimized event deleted handler
        hubConnection.On<object>("EventDeleted", async (deletedEventInfo) => {
            await InvokeAsync(async () => {
                var eventId = ExtractEventId(deletedEventInfo);
                
                if (!pendingLocalChanges.Remove(eventId))
                {
                    ShowSuccess("Event deleted!");
                }
                
                RemoveEventFromList(eventId);
                await JSRuntime.InvokeVoidAsync("removeEventFromCalendar", eventId);
                StateHasChanged();
            });
        });
    }

    // Helper methods for SignalR optimization
    private bool IsRecentLocalOperation() => 
        lastLocalOperationTime.HasValue && 
        (DateTime.UtcNow - lastLocalOperationTime.Value).TotalSeconds < 2;

    private void UpdateEventInList(EventResponse eventData)
    {
        var existingEvent = events.FirstOrDefault(e => e.Id == eventData.Id);
        if (existingEvent != null) events.Remove(existingEvent);
        events.Add(eventData);
    }

    private void RemoveEventFromList(int eventId)
    {
        var eventToRemove = events.FirstOrDefault(e => e.Id == eventId);
        if (eventToRemove != null) events.Remove(eventToRemove);
    }

    private int ExtractEventId(object deletedEventInfo)
    {
        var json = JsonSerializer.Serialize(deletedEventInfo);
        var doc = JsonDocument.Parse(json);
        return doc.RootElement.GetProperty("id").GetInt32();
    }

    private void ShowSuccess(string message)
    {
        successMessage = message;
        // Auto-clear after 3 seconds
        _ = Task.Delay(3000).ContinueWith(_ => {
            successMessage = null;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ShowError(string message)
    {
        errorMessage = message;
        // Auto-clear after 5 seconds
        _ = Task.Delay(5000).ContinueWith(_ => {
            errorMessage = null;
            InvokeAsync(StateHasChanged);
        });
    }

    private Task OnReconnecting(Exception? exception)
    {
        Logger.LogWarning(exception, "SignalR: ‚ö†Ô∏è Connection lost, attempting to reconnect...");
        connectionStatus = "Reconnecting to real-time updates...";
        isConnected = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnReconnected(string? connectionId)
    {
        Logger.LogInformation("SignalR: ‚úÖ Reconnected successfully! New Connection ID: {ConnectionId}", connectionId);
        connectionStatus = "Reconnected to real-time updates";
        isConnected = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnClosed(Exception? exception)
    {
        Logger.LogError(exception, "SignalR: ‚ùå Connection closed");
        connectionStatus = "Disconnected from real-time updates";
        isConnected = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasCheckedAuth)
        {
            hasCheckedAuth = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            
            if (authState.User.Identity?.IsAuthenticated != true)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }
            
            var token = authState.User.FindFirst("token")?.Value;
            if (!string.IsNullOrEmpty(token))
            {
                ApiService.SetToken(token);
                await LoadEvents();
                StateHasChanged();
            }
        }
        
        // Initialize calendar only once after auth check and events loaded
        if (hasCheckedAuth && !calendarInitialized && !isLoading && events.Any())
        {
            await InitializeCalendar();
        }
    }

    private async Task InitializeCalendar()
    {
        try
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            var calendarEvents = ConvertToFullCalendarFormat();
            
            var initialized = await JSRuntime.InvokeAsync<bool>(
                "fullCalendarInterop.initialize", 
                "calendar", 
                dotNetHelper, 
                calendarEvents, 
                true
            );
            
            if (initialized)
            {
                calendarInitialized = true;
                Logger.LogInformation("CalendarView: Calendar initialized with {Count} events", calendarEvents.Length);
            }
            else
            {
                ShowError("Failed to initialize calendar. Please refresh the page.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CalendarView: Calendar initialization failed");
            ShowError("Calendar initialization error. Please refresh the page.");
        }
    }

    private async Task LoadEvents()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            
            events = await ApiService.GetAllEventsAsync();
            
            Logger.LogInformation("CalendarView: Loaded {Count} events", events.Count);
            
            if (calendarInitialized)
            {
                await JSRuntime.InvokeVoidAsync("fullCalendarInterop.updateEvents", ConvertToFullCalendarFormat());
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CalendarView: Failed to load events");
            ShowError("Failed to load events. Please try again.");
        }
        finally
        {
            isLoading = false;
        }
    }

    private object[] ConvertToFullCalendarFormat()
    {
        return events.Select(e => new
        {
            id = e.Id.ToString(),
            title = e.Title,
            start = e.StartDate.ToString("yyyy-MM-ddTHH:mm:ss"),
            end = e.EndDate.ToString("yyyy-MM-ddTHH:mm:ss"),
            allDay = e.IsAllDay,
            backgroundColor = GetEventColor(e.Status, e.EventType),
            borderColor = GetEventColor(e.Status, e.EventType),
            extendedProps = new
            {
                description = e.Description,
                location = e.Location,
                status = e.Status,
                eventType = e.EventType,
                isPublic = e.IsPublic
            }
        }).ToArray();
    }

    private string GetEventColor(string status, string eventType)
    {
        // Color by status first
        return status.ToLower() switch
        {
            "completed" => "#10b981", // Green
            "cancelled" => "#ef4444", // Red
            "in progress" => "#f59e0b", // Amber
            _ => eventType switch // Default by event type
            {
                "Festival" => "#ec4899", // Pink
                "Interview" => "#8b5cf6", // Purple
                "Birthday" => "#f97316", // Orange
                "Exam" => "#dc2626", // Dark Red
                "Appointment" => "#06b6d4", // Cyan
                "Meeting" => "#3b82f6", // Blue
                "Reminder" => "#eab308", // Yellow
                "Task" => "#14b8a6", // Teal
                _ => "#6366f1" // Indigo (default)
            }
        };
    }

    // Modal management
    private void ShowCreateModal()
    {
        isEditMode = false;
        editEventId = 0;
        eventRequest = new CreateEventRequest
        {
            Title = "",
            StartDate = DateTime.Now,
            EndDate = DateTime.Now.AddHours(1),
            EventType = "Other",
            IsPublic = false
        };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        isEditMode = false;
        editEventId = 0;
        StateHasChanged(); // Force UI update
    }

    private void CloseDetailsModal()
    {
        showDetailsModal = false;
        selectedEvent = null;
        isUserOrganizer = false;
        isUserParticipant = false;
        StateHasChanged(); // Force UI update
    }

    // JSInvokable methods - called from JavaScript
    [JSInvokable]
    public Task OnDateClick(string dateStr)
    {
        try
        {
            Logger.LogInformation("CalendarView: Date clicked - {DateStr}", dateStr);
            var date = DateTime.Parse(dateStr);
            ShowDayEventsModal(date);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CalendarView: Error handling date click");
            errorMessage = "Failed to show events for selected date.";
        }
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnDateSelect(string startStr, string endStr, bool allDay)
    {
        try
        {
            Logger.LogInformation("CalendarView: Date range selected - {Start} to {End}, AllDay: {AllDay}", startStr, endStr, allDay);
            var startDate = DateTime.Parse(startStr);
            var endDate = DateTime.Parse(endStr);
            
            ShowCreateModalForDateRange(startDate, endDate, allDay);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CalendarView: Error handling date selection");
            errorMessage = "Failed to create event for selected date range.";
        }
        return Task.CompletedTask;
    }

    [JSInvokable]
    public async Task OnEventClick(int eventId)
    {
        try
        {
            Logger.LogInformation("CalendarView: Event clicked - {EventId}", eventId);
            
            var eventItem = events.FirstOrDefault(e => e.Id == eventId);
            if (eventItem != null)
            {
                await ShowEventDetails(eventItem);
                StateHasChanged(); // Force UI update
            }
            else
            {
                Logger.LogWarning("CalendarView: Event with ID {EventId} not found in events list", eventId);
                errorMessage = "Event not found.";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CalendarView: Error handling event click");
            errorMessage = "Failed to show event details.";
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnEventDrop(int eventId, string newStartStr, string newEndStr, bool allDay)
    {
        try
        {
            pendingLocalChanges.Add(eventId);
            
            var eventItem = events.FirstOrDefault(e => e.Id == eventId);
            if (eventItem == null)
            {
                ShowError("Event not found.");
                pendingLocalChanges.Remove(eventId);
                await JSRuntime.InvokeVoidAsync("fullCalendarInterop.revertEvent", eventId);
                return;
            }

            var updateRequest = CreateUpdateRequestFromEvent(
                eventItem, 
                DateTime.Parse(newStartStr), 
                DateTime.Parse(newEndStr), 
                allDay
            );

            await ApiService.UpdateEventAsync(eventId, updateRequest);
            ShowSuccess("Event rescheduled successfully!");
            Logger.LogInformation("CalendarView: Event {EventId} rescheduled", eventId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CalendarView: Error rescheduling event");
            ShowError("Failed to reschedule event.");
            pendingLocalChanges.Remove(eventId);
            await JSRuntime.InvokeVoidAsync("fullCalendarInterop.revertEvent", eventId);
        }
    }

    [JSInvokable]
    public async Task OnEventResize(int eventId, string newStartStr, string newEndStr)
    {
        try
        {
            pendingLocalChanges.Add(eventId);
            
            var eventItem = events.FirstOrDefault(e => e.Id == eventId);
            if (eventItem == null)
            {
                ShowError("Event not found.");
                pendingLocalChanges.Remove(eventId);
                await JSRuntime.InvokeVoidAsync("fullCalendarInterop.revertEvent", eventId);
                return;
            }

            var updateRequest = CreateUpdateRequestFromEvent(
                eventItem, 
                DateTime.Parse(newStartStr), 
                DateTime.Parse(newEndStr)
            );

            await ApiService.UpdateEventAsync(eventId, updateRequest);
            ShowSuccess("Event duration updated successfully!");
            Logger.LogInformation("CalendarView: Event {EventId} resized", eventId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CalendarView: Error resizing event");
            ShowError("Failed to update event duration.");
            pendingLocalChanges.Remove(eventId);
            await JSRuntime.InvokeVoidAsync("fullCalendarInterop.revertEvent", eventId);
        }
    }

    // Helper method to create update request from existing event
    private UpdateEventRequest CreateUpdateRequestFromEvent(
        EventResponse eventItem, 
        DateTime newStart, 
        DateTime newEnd, 
        bool? allDay = null)
    {
        return new UpdateEventRequest
        {
            Title = eventItem.Title,
            Description = eventItem.Description,
            StartDate = newStart,
            EndDate = newEnd,
            Location = eventItem.Location,
            IsAllDay = allDay ?? eventItem.IsAllDay,
            Color = eventItem.Color,
            CategoryId = eventItem.CategoryId,
            Status = eventItem.Status,
            EventType = eventItem.EventType,
            IsPublic = eventItem.IsPublic,
            Invitations = eventItem.Invitations?.Select(i => new EventInvitationRequest
            {
                InviteeName = i.InviteeName,
                InviteeEmail = i.InviteeEmail
            }).ToList()
        };
    }

    // Event CRUD operations
    private async Task SaveEvent()
    {
        try
        {
            isSaving = true;

            if (isEditMode)
            {
                pendingLocalChanges.Add(editEventId);
                
                var updateRequest = CreateUpdateRequest();
                await ApiService.UpdateEventAsync(editEventId, updateRequest);
                ShowSuccess("Event updated successfully!");
            }
            else
            {
                lastLocalOperationTime = DateTime.UtcNow;
                await ApiService.CreateEventAsync(eventRequest);
                ShowSuccess("Event created successfully!");
            }

            CloseModal();
            Logger.LogInformation("CalendarView: Event saved, awaiting SignalR notification");
        }
        catch (InvalidOperationException ex)
        {
            // Handle validation errors with specific message
            Logger.LogWarning(ex, "CalendarView: Validation error saving event");
            ShowError(ex.Message);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CalendarView: Error saving event");
            ShowError(isEditMode ? "Failed to update event." : "Failed to create event.");
        }
        finally
        {
            isSaving = false;
        }
    }

    private UpdateEventRequest CreateUpdateRequest() => new()
    {
        Title = eventRequest.Title,
        Description = eventRequest.Description,
        StartDate = eventRequest.StartDate,
        EndDate = eventRequest.EndDate,
        Location = eventRequest.Location,
        IsAllDay = eventRequest.IsAllDay,
        Color = eventRequest.Color,
        CategoryId = eventRequest.CategoryId,
        EventType = eventRequest.EventType,
        IsPublic = eventRequest.IsPublic,
        Invitations = eventRequest.Invitations
    };

    private async Task DeleteEventFromDetails(int eventId)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this event?");
            
            if (!confirmed) return;

            pendingLocalChanges.Add(eventId);
            
            // Optimistic UI update - remove immediately
            RemoveEventFromList(eventId);
            await JSRuntime.InvokeVoidAsync("removeEventFromCalendar", eventId);
            
            // Call API
            await ApiService.DeleteEventAsync(eventId);
            ShowSuccess("Event deleted successfully!");
            CloseDetailsModal();
            
            Logger.LogInformation("CalendarView: Event {EventId} deleted", eventId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CalendarView: Error deleting event");
            ShowError("Failed to delete event.");
            pendingLocalChanges.Remove(eventId);
            // Restore events on failure
            await LoadEvents();
        }
    }

    // Helper methods for modal display
    private void ShowDayEventsModal(DateTime date)
    {
        selectedDate = date;
        
        // Filter events for the selected day
        dayEvents = events.Where(e => 
            e.StartDate.Date <= date.Date && 
            e.EndDate.Date >= date.Date
        ).OrderBy(e => e.StartDate).ToList();
        
        Logger.LogInformation("CalendarView: Showing {Count} events for date {Date}", dayEvents.Count, date.ToString("yyyy-MM-dd"));
        showDayEventsModal = true;
        StateHasChanged(); // Force UI update
    }
    
    private void CloseDayEventsModal()
    {
        showDayEventsModal = false;
        selectedDate = null;
        dayEvents.Clear();
        StateHasChanged(); // Force UI update
    }
    
    private void TransitionToCreateEventModal()
    {
        // Save the date before closing the modal
        var dateToUse = selectedDate ?? DateTime.Now;
        
        // Close the day events modal
        showDayEventsModal = false;
        dayEvents.Clear();
        
        // Open the create event modal with the saved date
        isEditMode = false;
        editEventId = 0;
        eventRequest = new CreateEventRequest
        {
            Title = "",
            StartDate = dateToUse.Date.AddHours(9), // Default to 9 AM
            EndDate = dateToUse.Date.AddHours(10), // Default 1 hour duration
            EventType = "Other",
            IsPublic = false
        };
        showModal = true;
        
        // Clear selectedDate after use
        selectedDate = null;
        
        Logger.LogInformation("CalendarView: Transitioned from day events modal to create event modal for date {Date}", dateToUse.ToString("yyyy-MM-dd"));
        StateHasChanged(); // Force UI update
    }
    
    private void ShowCreateModalForDate(DateTime date)
    {
        isEditMode = false;
        editEventId = 0;
        eventRequest = new CreateEventRequest
        {
            Title = "",
            StartDate = date.Date.AddHours(9), // Default to 9 AM
            EndDate = date.Date.AddHours(10), // Default 1 hour duration
            EventType = "Other",
            IsPublic = false
        };
        showModal = true;
        StateHasChanged(); // Force UI update
    }

    private void ShowCreateModalForDateRange(DateTime startDate, DateTime endDate, bool allDay)
    {
        isEditMode = false;
        editEventId = 0;
        eventRequest = new CreateEventRequest
        {
            Title = "",
            StartDate = startDate,
            EndDate = endDate,
            IsAllDay = allDay,
            EventType = "Other",
            IsPublic = false
        };
        showModal = true;
        StateHasChanged(); // Force UI update
    }

    private async Task ShowEventDetailsFromDayList(EventResponse eventItem)
    {
        Logger.LogInformation("CalendarView: Transitioning from day events modal to event details for: {EventTitle} (ID: {EventId})", eventItem.Title, eventItem.Id);
        
        // Close the day events modal first
        showDayEventsModal = false;
        selectedDate = null;
        dayEvents.Clear();
        
        // Then show the event details
        await ShowEventDetails(eventItem);
    }
    
    private async Task ShowEventDetails(EventResponse eventItem)
    {
        selectedEvent = eventItem;
        
        // Use cached user ID instead of fetching auth state again
        isUserOrganizer = eventItem.UserId == currentUserId;
        isUserParticipant = false; // TODO: Check participants list
        
        showDetailsModal = true;
        Logger.LogInformation("CalendarView: Showing details for event {EventId}", eventItem.Id);
        StateHasChanged();
        
        await Task.CompletedTask;
    }

    private void EditEventFromDetails(EventResponse eventItem)
    {
        isEditMode = true;
        editEventId = eventItem.Id;
        eventRequest = new CreateEventRequest
        {
            Title = eventItem.Title,
            Description = eventItem.Description,
            StartDate = eventItem.StartDate,
            EndDate = eventItem.EndDate,
            Location = eventItem.Location,
            IsAllDay = eventItem.IsAllDay,
            Color = eventItem.Color,
            CategoryId = eventItem.CategoryId,
            EventType = eventItem.EventType,
            IsPublic = eventItem.IsPublic,
            Invitations = eventItem.Invitations?.Select(i => new EventInvitationRequest
            {
                InviteeName = i.InviteeName,
                InviteeEmail = i.InviteeEmail
            }).ToList()
        };
        
        CloseDetailsModal();
        showModal = true;
        StateHasChanged(); // Force UI update
    }

    private async Task JoinEvent()
    {
        // This would be implemented with a proper API endpoint
        // For now, just show a success message
        successMessage = "You've joined the event!";
        CloseDetailsModal();
        await LoadEvents();
        StateHasChanged(); // Force UI update
    }

    private void AddInvitation()
    {
        if (eventRequest.Invitations == null)
        {
            eventRequest.Invitations = new List<EventInvitationRequest>();
        }
        
        eventRequest.Invitations.Add(new EventInvitationRequest
        {
            InviteeName = "",
            InviteeEmail = ""
        });
    }

    private string GetEventTypeIcon(string eventType)
    {
        return eventType switch
        {
            "Festival" => "üéâ",
            "Interview" => "üíº",
            "Birthday" => "üéÇ",
            "Exam" => "üìù",
            "Appointment" => "üè•",
            "Meeting" => "üë•",
            "Reminder" => "‚è∞",
            "Task" => "‚úÖ",
            _ => "üìÖ"
        };
    }

    private bool confirm(string message)
    {
        // This is a simplified version. In production, you'd use JSInterop for a proper confirm dialog
        // For now, we'll just return true
        return true;
    }

    public async ValueTask DisposeAsync()
    {
        if (dotNetHelper != null)
        {
            await JSRuntime.InvokeVoidAsync("fullCalendarInterop.destroy");
            dotNetHelper.Dispose();
        }

        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}