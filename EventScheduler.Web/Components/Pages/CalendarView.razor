@page "/calendar-view"
@using EventScheduler.Application.DTOs.Request
@using EventScheduler.Application.DTOs.Response
@using EventScheduler.Domain.Entities
@using EventScheduler.Web.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using System.Text.Json
@rendermode InteractiveServer
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<CalendarView> Logger
@implements IAsyncDisposable

<PageTitle>Calendar View - Event Scheduler</PageTitle>

<div class="calendar-container">
    <!-- Header Section -->
    <div class="calendar-header">
        <div class="header-content">
            <div class="header-text">
                <div class="header-icon">
                    <i class="bi bi-calendar-heart"></i>
                </div>
                <div>
                    <h1 class="header-title">Event Calendar</h1>
                    <p class="header-subtitle">
                        Manage your schedule with ease. Click dates to create events, click events to edit, drag to reschedule.
                    </p>
                </div>
            </div>
            <div class="header-actions">
                <a href="/calendar-list" class="btn btn-outline btn-list">
                    <i class="bi bi-list-task"></i>
                    <span>List View</span>
                </a>
                <button class="btn btn-primary btn-create" @onclick="ShowCreateModal">
                    <i class="bi bi-plus-lg"></i>
                    <span>New Event</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Alert Messages -->
    <div class="alert-container">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-error">
                <div class="alert-icon">
                    <i class="bi bi-exclamation-triangle"></i>
                </div>
                <div class="alert-content">
                    <span>@errorMessage</span>
                </div>
                <button class="alert-close" @onclick="() => errorMessage = null">
                    <i class="bi bi-x"></i>
                </button>
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">
                <div class="alert-icon">
                    <i class="bi bi-check-circle"></i>
                </div>
                <div class="alert-content">
                    <span>@successMessage</span>
                </div>
                <button class="alert-close" @onclick="() => successMessage = null">
                    <i class="bi bi-x"></i>
                </button>
            </div>
        }
    </div>

    <!-- Main Content -->
    <div class="calendar-content">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner">
                    <div class="spinner"></div>
                </div>
                <div class="loading-text">
                    <h3>Loading Your Calendar</h3>
                    <p>Preparing your events and schedule...</p>
                </div>
            </div>
        }
        else
        {
            <div class="calendar-card">
                <div class="calendar-card-header">
                    <div class="calendar-info">
                        <i class="bi bi-info-circle"></i>
                        <span>Drag and drop events to reschedule them</span>
                    </div>
                </div>
                <div class="calendar-card-body">
                    <div id="calendar"></div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Create/Edit Event Modal -->
@if (showModal)
{
    <div class="modal-overlay">
        <div class="modal-container">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                    <div class="modal-title">
                        <div class="modal-icon">
                            <i class="bi bi-@(isEditMode ? "pencil-square" : "plus-circle")"></i>
                        </div>
                        <div>
                            <h3>@(isEditMode ? "Edit Event" : "Create New Event")</h3>
                            <p>@(isEditMode ? "Update your event details" : "Add a new event to your calendar")</p>
                        </div>
                    </div>
                    <button class="modal-close" @onclick="CloseModal">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>

                <!-- Modal Body -->
                <div class="modal-body">
                    <EditForm Model="@eventRequest" OnValidSubmit="@SaveEvent">
                        <DataAnnotationsValidator />
                        
                        <div class="form-grid">
                            <!-- Title -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-type"></i>
                                    Event Title
                                    <span class="required">*</span>
                                </label>
                                <InputText class="form-control" @bind-Value="eventRequest.Title" 
                                         placeholder="What's the event about?" />
                                <ValidationMessage For="@(() => eventRequest.Title)" />
                            </div>

                            <!-- Description -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-text-paragraph"></i>
                                    Description
                                </label>
                                <InputTextArea class="form-control" rows="3" @bind-Value="eventRequest.Description" 
                                             placeholder="Add some details about your event (optional)" />
                            </div>

                            <!-- Date & Time -->
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="bi bi-clock"></i>
                                    Start Date & Time
                                    <span class="required">*</span>
                                </label>
                                <InputDate Type="InputDateType.DateTimeLocal" class="form-control" 
                                         @bind-Value="eventRequest.StartDate" />
                            </div>

                            <div class="form-group">
                                <label class="form-label">
                                    <i class="bi bi-clock-fill"></i>
                                    End Date & Time
                                    <span class="required">*</span>
                                </label>
                                <InputDate Type="InputDateType.DateTimeLocal" class="form-control" 
                                         @bind-Value="eventRequest.EndDate" />
                            </div>

                            <!-- Location -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-geo-alt"></i>
                                    Location
                                </label>
                                <InputText class="form-control" @bind-Value="eventRequest.Location" 
                                         placeholder="Where will this event take place? (optional)" />
                            </div>

                            <!-- All Day Toggle -->
                            <div class="form-group full-width">
                                <div class="toggle-group">
                                    <InputCheckbox class="toggle-input" id="isAllDay" @bind-Value="eventRequest.IsAllDay" />
                                    <label class="toggle-label" for="isAllDay">
                                        <div class="toggle-slider"></div>
                                        <span class="toggle-text">
                                            <i class="bi bi-sun"></i>
                                            All Day Event
                                        </span>
                                    </label>
                                </div>
                            </div>

                            <!-- Event Type -->
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="bi bi-tag"></i>
                                    Event Type
                                </label>
                                <InputSelect class="form-control" @bind-Value="eventRequest.EventType">
                                    <option value="Other">Other</option>
                                    <option value="Festival">üéâ Festival</option>
                                    <option value="Interview">üíº Interview</option>
                                    <option value="Birthday">üéÇ Birthday</option>
                                    <option value="Exam">üìù Exam</option>
                                    <option value="Appointment">üè• Appointment</option>
                                    <option value="Meeting">üë• Meeting</option>
                                    <option value="Reminder">‚è∞ Reminder</option>
                                    <option value="Task">‚úÖ Task</option>
                                </InputSelect>
                            </div>

                            <!-- Public/Private Toggle -->
                            <div class="form-group">
                                <div class="toggle-group">
                                    <InputCheckbox class="toggle-input" id="isPublic" @bind-Value="eventRequest.IsPublic" />
                                    <label class="toggle-label" for="isPublic">
                                        <div class="toggle-slider"></div>
                                        <span class="toggle-text">
                                            <i class="bi bi-globe"></i>
                                            Public Event
                                        </span>
                                    </label>
                                </div>
                            </div>

                            <!-- Invitations (only for private events) -->
                            @if (!eventRequest.IsPublic)
                            {
                                <div class="form-group full-width">
                                    <label class="form-label">
                                        <i class="bi bi-people"></i>
                                        Invitations (Optional)
                                    </label>
                                    @if (eventRequest.Invitations == null)
                                    {
                                        eventRequest.Invitations = new List<EventInvitationRequest>();
                                    }
                                    @foreach (var invitation in eventRequest.Invitations.ToList())
                                    {
                                        <div class="invitation-row">
                                            <input type="text" class="form-control" placeholder="Name" @bind="invitation.InviteeName" />
                                            <input type="email" class="form-control" placeholder="Email" @bind="invitation.InviteeEmail" />
                                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => eventRequest.Invitations.Remove(invitation)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    }
                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="AddInvitation">
                                        <i class="bi bi-plus"></i> Add Invitation
                                    </button>
                                </div>
                            }
                        </div>

                        <!-- Modal Footer -->
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                                <i class="bi bi-x-circle"></i>
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-small"></span>
                                }
                                <i class="bi bi-@(isEditMode ? "check2" : "plus-lg")"></i>
                                @(isEditMode ? "Update Event" : "Create Event")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<style>
    /* Main Layout */
    .calendar-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        padding: 0;
    }

    /* Header Styles */
    .calendar-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem 0;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    }

    .header-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 2rem;
    }

    .header-text {
        display: flex;
        align-items: center;
        gap: 1rem;
        flex: 1;
    }

    .header-icon {
        font-size: 3rem;
        opacity: 0.9;
    }

    .header-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .header-subtitle {
        font-size: 1.1rem;
        opacity: 0.9;
        margin: 0.5rem 0 0 0;
        max-width: 500px;
    }

    .header-actions {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    /* Button Styles */
    .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 12px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.3s ease;
        cursor: pointer;
        font-size: 0.95rem;
    }

    .btn-primary {
        background: linear-gradient(135deg, #00b4db 0%, #0083b0 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(0, 180, 219, 0.3);
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 180, 219, 0.4);
    }

    .btn-outline {
        background: transparent;
        color: white;
        border: 2px solid rgba(255,255,255,0.3);
    }

    .btn-outline:hover {
        background: rgba(255,255,255,0.1);
        border-color: rgba(255,255,255,0.5);
        transform: translateY(-2px);
    }

    /* Alert Styles */
    .alert-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 1rem 2rem;
    }

    .alert {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem 1.5rem;
        border-radius: 12px;
        margin-bottom: 1rem;
        animation: slideIn 0.3s ease;
    }

    .alert-error {
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
        color: white;
    }

    .alert-success {
        background: linear-gradient(135deg, #51cf66 0%, #40c057 100%);
        color: white;
    }

    .alert-icon {
        font-size: 1.2rem;
    }

    .alert-content {
        flex: 1;
    }

    .alert-close {
        background: none;
        border: none;
        color: inherit;
        cursor: pointer;
        padding: 0.25rem;
        border-radius: 4px;
        transition: background 0.2s ease;
    }

    .alert-close:hover {
        background: rgba(255,255,255,0.2);
    }

    /* Content Area */
    .calendar-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2rem;
    }

    /* Loading Styles */
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 4rem 2rem;
        text-align: center;
    }

    .loading-spinner {
        margin-bottom: 2rem;
    }

    .spinner {
        width: 60px;
        height: 60px;
        border: 4px solid #e3e3e3;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .loading-text h3 {
        color: #2d3748;
        margin-bottom: 0.5rem;
    }

    .loading-text p {
        color: #718096;
    }

    /* Calendar Card */
    .calendar-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        overflow: hidden;
        backdrop-filter: blur(10px);
    }

    .calendar-card-header {
        padding: 1.5rem 2rem;
        background: rgba(255,255,255,0.8);
        border-bottom: 1px solid #e2e8f0;
    }

    .calendar-info {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #718096;
        font-size: 0.9rem;
    }

    .calendar-card-body {
        padding: 0;
    }

    /* FullCalendar Customization */
    #calendar {
        padding: 1rem;
        min-height: 500px;
        max-width: 100%;
        overflow-x: auto;
    }

    .fc {
        --fc-border-color: #e2e8f0;
        --fc-page-bg-color: white;
        --fc-neutral-bg-color: #f7fafc;
    }

    .fc .fc-toolbar {
        padding: 1.5rem 2rem;
        margin-bottom: 0;
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    }

    .fc .fc-toolbar-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: #2d3748;
    }

    .fc .fc-button {
        padding: 0.6rem 1.2rem;
        border-radius: 8px;
        font-weight: 600;
        border: none;
        transition: all 0.3s ease;
    }

    .fc .fc-button-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .fc .fc-button-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

    .fc .fc-button-primary:disabled {
        background: #cbd5e0;
        transform: none;
        box-shadow: none;
    }

    .fc-event {
        border: none;
        border-radius: 8px;
        padding: 0.5rem;
        font-weight: 500;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .fc-event:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    /* Event Status Colors */
    .fc-event.event-scheduled {
        background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);
    }

    .fc-event.event-completed {
        background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
    }

    .fc-event.event-cancelled {
        background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%);
    }

    .fc-event.event-inprogress {
        background: linear-gradient(135deg, #ed8936 0%, #dd6b20 100%);
    }

    /* Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.6);
        backdrop-filter: blur(8px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        padding: 2rem;
        animation: fadeIn 0.3s ease;
    }

    .modal-container {
        width: 100%;
        max-width: 600px;
        max-height: 90vh;
        overflow: hidden;
    }

    .modal-content {
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0,0,0,0.2);
        animation: slideUp 0.3s ease;
    }

    .modal-header {
        padding: 2rem 2rem 1rem;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }

    .modal-title {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
    }

    .modal-icon {
        font-size: 2rem;
        color: #667eea;
    }

    .modal-title h3 {
        margin: 0;
        color: #2d3748;
        font-weight: 700;
    }

    .modal-title p {
        margin: 0.25rem 0 0 0;
        color: #718096;
        font-size: 0.9rem;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 1.25rem;
        color: #a0aec0;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 8px;
        transition: all 0.2s ease;
    }

    .modal-close:hover {
        background: #f7fafc;
        color: #718096;
    }

    .modal-body {
        padding: 1rem 2rem;
        max-height: 60vh;
        overflow-y: auto;
    }

    /* Form Styles */
    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
    }

    .form-group.full-width {
        grid-column: 1 / -1;
    }

    .form-label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 0.5rem;
    }

    .form-label i {
        color: #667eea;
    }

    .required {
        color: #e53e3e;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        background: white;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    /* Toggle Switch */
    .toggle-group {
        display: flex;
        align-items: center;
    }

    .toggle-input {
        display: none;
    }

    .toggle-label {
        display: flex;
        align-items: center;
        gap: 1rem;
        cursor: pointer;
        padding: 0.5rem 0;
    }

    .toggle-slider {
        width: 50px;
        height: 26px;
        background: #e2e8f0;
        border-radius: 50px;
        position: relative;
        transition: all 0.3s ease;
    }

    .toggle-slider::before {
        content: '';
        position: absolute;
        width: 20px;
        height: 20px;
        background: white;
        border-radius: 50%;
        top: 3px;
        left: 3px;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .toggle-input:checked + .toggle-label .toggle-slider {
        background: #667eea;
    }

    .toggle-input:checked + .toggle-label .toggle-slider::before {
        transform: translateX(24px);
    }

    .toggle-text {
        font-weight: 500;
        color: #2d3748;
    }

    /* Modal Footer */
    .modal-footer {
        padding: 1.5rem 2rem 2rem;
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        background: #f8fafc;
        border-top: 1px solid #e2e8f0;
    }

    .btn-secondary {
        background: #e2e8f0;
        color: #4a5568;
    }

    .btn-secondary:hover {
        background: #cbd5e0;
    }

    .spinner-small {
        width: 16px;
        height: 16px;
        border: 2px solid transparent;
        border-top: 2px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-right: 0.5rem;
    }

    /* Animations */
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes slideUp {
        from { 
            opacity: 0;
            transform: translateY(20px);
        }
        to { 
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateX(-20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    /* Invitation Rows */
    .invitation-row {
        display: grid;
        grid-template-columns: 1fr 1fr auto;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .invitation-row input {
        font-size: 0.9rem;
    }

    .invitation-row .btn {
        padding: 0.375rem 0.75rem;
    }

    .btn-outline-primary {
        background: transparent;
        color: #667eea;
        border: 2px solid #667eea;
    }

    .btn-outline-primary:hover {
        background: #667eea;
        color: white;
    }

    .btn-danger {
        background: #f56565;
        color: white;
    }

    .btn-danger:hover {
        background: #e53e3e;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .header-content {
            flex-direction: column;
            text-align: center;
            gap: 1.5rem;
        }

        .header-text {
            flex-direction: column;
            text-align: center;
        }

        .header-actions {
            justify-content: center;
        }

        .form-grid {
            grid-template-columns: 1fr;
        }

        .modal-body {
            padding: 1rem;
        }

        .modal-footer {
            flex-direction: column;
        }

        .calendar-content {
            padding: 1rem;
        }

        #calendar {
            padding: 0.5rem;
        }
    }
</style>

@code {
    private List<EventResponse> events = new();
    private bool isLoading = false;
    private bool calendarInitialized = false;
    private DotNetObjectReference<CalendarView>? dotNetHelper;
    private bool hasCheckedAuth = false;
    private string? errorMessage;
    private string? successMessage;
    
    // Modal state
    private bool showModal = false;
    private bool isEditMode = false;
    private int editEventId = 0;
    private bool isSaving = false;
    
    // Form model
    private CreateEventRequest eventRequest = new CreateEventRequest
    {
        Title = "",
        StartDate = DateTime.Now,
        EndDate = DateTime.Now.AddHours(1)
    };

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("CalendarView: OnInitializedAsync started");
        
        // Initial check without JS interop (will succeed if already authenticated in memory)
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated == true)
        {
            hasCheckedAuth = true;
            Logger.LogInformation("CalendarView: User authenticated in OnInitializedAsync");
            
            // Get token from auth state and set it in ApiService
            var token = user.FindFirst("token")?.Value;
            if (!string.IsNullOrEmpty(token))
            {
                ApiService.SetToken(token);
                Logger.LogInformation("CalendarView: API token set from auth state");
            }
            
            await LoadEvents();
        }
        else
        {
            Logger.LogInformation("CalendarView: User not authenticated yet, will check in OnAfterRenderAsync");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("CalendarView: OnAfterRenderAsync - FirstRender={FirstRender}, HasCheckedAuth={HasCheckedAuth}, CalendarInitialized={CalendarInitialized}, IsLoading={IsLoading}", 
            firstRender, hasCheckedAuth, calendarInitialized, isLoading);
        
        if (firstRender && !hasCheckedAuth)
        {
            hasCheckedAuth = true;
            Logger.LogInformation("CalendarView: Re-checking authentication with JS interop available");
            
            // Re-check authentication after render (when JS interop is available)
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated != true)
            {
                Logger.LogWarning("CalendarView: User not authenticated, redirecting to login");
                NavigationManager.NavigateTo("/login");
                return;
            }
            
            Logger.LogInformation("CalendarView: User authenticated in OnAfterRenderAsync");
            
            // Get token from auth state and set it in ApiService
            var token = user.FindFirst("token")?.Value;
            if (!string.IsNullOrEmpty(token))
            {
                ApiService.SetToken(token);
                Logger.LogInformation("CalendarView: API token set");
            }
            
            await LoadEvents();
            StateHasChanged();
        }
        
        // Initialize calendar after authentication is confirmed and events are loaded
        if (hasCheckedAuth && !calendarInitialized && !isLoading)
        {
            Logger.LogInformation("CalendarView: Starting calendar initialization - Event count: {EventCount}", events.Count);
            
            try
            {
                // Small delay to ensure FullCalendar library is loaded
                await Task.Delay(200);
                
                dotNetHelper = DotNetObjectReference.Create(this);
                var calendarEvents = ConvertToFullCalendarFormat();
                
                Logger.LogInformation("CalendarView: Calling fullCalendarInterop.initialize with {EventCount} events", calendarEvents.Length);
                
                var initialized = await JSRuntime.InvokeAsync<bool>("fullCalendarInterop.initialize", 
                    "calendar", dotNetHelper, calendarEvents, true);
                
                if (initialized)
                {
                    calendarInitialized = true;
                    Logger.LogInformation("CalendarView: ‚úÖ Calendar initialized successfully!");
                }
                else
                {
                    Logger.LogError("CalendarView: ‚ùå Calendar initialization returned false");
                    errorMessage = "Failed to initialize calendar. Please refresh the page.";
                }
                
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "CalendarView: ‚ùå Exception during calendar initialization");
                errorMessage = $"Calendar initialization error: {ex.Message}";
                StateHasChanged();
            }
        }
    }

    private async Task LoadEvents()
    {
        try
        {
            Logger.LogInformation("CalendarView: Loading events from API...");
            isLoading = true;
            errorMessage = null;
            events = await ApiService.GetAllEventsAsync();
            
            Logger.LogInformation("CalendarView: Loaded {EventCount} events successfully", events.Count);
            
            if (calendarInitialized)
            {
                Logger.LogInformation("CalendarView: Calendar already initialized, updating events");
                var calendarEvents = ConvertToFullCalendarFormat();
                await JSRuntime.InvokeVoidAsync("fullCalendarInterop.updateEvents", calendarEvents);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CalendarView: Failed to load events from API");
            errorMessage = "Failed to load events. Please try again.";
        }
        finally
        {
            isLoading = false;
            Logger.LogInformation("CalendarView: LoadEvents completed, isLoading set to false");
        }
    }

    private object[] ConvertToFullCalendarFormat()
    {
        return events.Select(e => {
            var status = Enum.TryParse<EventStatus>(e.Status, out var parsedStatus) 
                ? parsedStatus 
                : EventStatus.Scheduled;
            
            return new
            {
                id = e.Id,
                title = e.Title,
                start = e.StartDate.ToString("yyyy-MM-ddTHH:mm:ss"),
                end = e.EndDate.ToString("yyyy-MM-ddTHH:mm:ss"),
                allDay = e.IsAllDay,
                backgroundColor = GetEventColor(status),
                borderColor = GetEventColor(status),
                extendedProps = new
                {
                    description = e.Description,
                    location = e.Location,
                    status = e.Status,
                    categoryId = e.CategoryId
                }
            };
        }).ToArray();
    }

    private string GetEventColor(EventStatus status)
    {
        return status switch
        {
            EventStatus.Scheduled => "#4299e1",    // Blue
            EventStatus.InProgress => "#ed8936",   // Orange
            EventStatus.Completed => "#48bb78",    // Green
            EventStatus.Cancelled => "#f56565",    // Red
            _ => "#4299e1"
        };
    }

    [JSInvokable]
    public Task OnEventClick(int eventId)
    {
        var evt = events.FirstOrDefault(e => e.Id == eventId);
        if (evt == null) return Task.CompletedTask;
        
        ShowEditModal(evt);
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnDateSelect(string startStr, string endStr, bool allDay)
    {
        eventRequest = new CreateEventRequest
        {
            Title = "",
            Description = "",
            StartDate = DateTime.Parse(startStr),
            EndDate = DateTime.Parse(endStr),
            IsAllDay = allDay
        };
        
        isEditMode = false;
        showModal = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public async Task OnEventDrop(int eventId, string startStr, string endStr, bool allDay)
    {
        try
        {
            Logger.LogInformation("CalendarView: Event {EventId} dropped - NewStart={NewStart}, NewEnd={NewEnd}, AllDay={AllDay}", 
                eventId, startStr, endStr, allDay);
            
            var evt = events.FirstOrDefault(e => e.Id == eventId);
            if (evt == null)
            {
                Logger.LogWarning("CalendarView: Event {EventId} not found for drop operation", eventId);
                return;
            }

            var start = DateTime.Parse(startStr);
            var end = DateTime.Parse(endStr);

            var updateRequest = new UpdateEventRequest
            {
                Title = evt.Title,
                Description = evt.Description,
                StartDate = start,
                EndDate = end,
                Location = evt.Location,
                IsAllDay = allDay,
                Color = evt.Color,
                CategoryId = evt.CategoryId,
                Status = evt.Status,
                EventType = evt.EventType,
                IsPublic = evt.IsPublic,
                Invitations = evt.Invitations?.Select(i => new EventInvitationRequest 
                { 
                    InviteeName = i.InviteeName, 
                    InviteeEmail = i.InviteeEmail 
                }).ToList()
            };

            await ApiService.UpdateEventAsync(eventId, updateRequest);
            Logger.LogInformation("CalendarView: Event {EventId} rescheduled successfully", eventId);
            successMessage = "Event rescheduled successfully!";
            await LoadEvents();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CalendarView: Failed to reschedule event {EventId}", eventId);
            errorMessage = $"Failed to reschedule event: {ex.Message}";
            StateHasChanged();
            // Reload to revert the change
            await LoadEvents();
        }
    }

    [JSInvokable]
    public async Task OnEventResize(int eventId, string startStr, string endStr)
    {
        try
        {
            Logger.LogInformation("CalendarView: Event {EventId} resized - NewStart={NewStart}, NewEnd={NewEnd}", 
                eventId, startStr, endStr);
            
            var evt = events.FirstOrDefault(e => e.Id == eventId);
            if (evt == null)
            {
                Logger.LogWarning("CalendarView: Event {EventId} not found for resize operation", eventId);
                return;
            }

            var start = DateTime.Parse(startStr);
            var end = DateTime.Parse(endStr);

            var updateRequest = new UpdateEventRequest
            {
                Title = evt.Title,
                Description = evt.Description,
                StartDate = start,
                EndDate = end,
                Location = evt.Location,
                IsAllDay = evt.IsAllDay,
                Color = evt.Color,
                CategoryId = evt.CategoryId,
                Status = evt.Status,
                EventType = evt.EventType,
                IsPublic = evt.IsPublic,
                Invitations = evt.Invitations?.Select(i => new EventInvitationRequest 
                { 
                    InviteeName = i.InviteeName, 
                    InviteeEmail = i.InviteeEmail 
                }).ToList()
            };

            await ApiService.UpdateEventAsync(eventId, updateRequest);
            Logger.LogInformation("CalendarView: Event {EventId} duration updated successfully", eventId);
            successMessage = "Event duration updated successfully!";
            await LoadEvents();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CalendarView: Failed to update event {EventId} duration", eventId);
            errorMessage = $"Failed to update event duration: {ex.Message}";
            StateHasChanged();
            await LoadEvents();
        }
    }

    private void ShowCreateModal()
    {
        isEditMode = false;
        eventRequest = new CreateEventRequest
        {
            Title = "",
            StartDate = DateTime.Now,
            EndDate = DateTime.Now.AddHours(1)
        };
        showModal = true;
    }

    private void ShowEditModal(EventResponse evt)
    {
        isEditMode = true;
        editEventId = evt.Id;
        eventRequest = new CreateEventRequest
        {
            Title = evt.Title,
            Description = evt.Description,
            StartDate = evt.StartDate,
            EndDate = evt.EndDate,
            Location = evt.Location,
            IsAllDay = evt.IsAllDay,
            Color = evt.Color,
            CategoryId = evt.CategoryId,
            EventType = evt.EventType,
            IsPublic = evt.IsPublic,
            Invitations = evt.Invitations?.Select(i => new EventInvitationRequest 
            { 
                InviteeName = i.InviteeName, 
                InviteeEmail = i.InviteeEmail 
            }).ToList()
        };
        showModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
        errorMessage = null;
    }

    private void AddInvitation()
    {
        if (eventRequest.Invitations == null)
        {
            eventRequest.Invitations = new List<EventInvitationRequest>();
        }
        eventRequest.Invitations.Add(new EventInvitationRequest { InviteeName = "", InviteeEmail = "" });
    }

    private async Task SaveEvent()
    {
        try
        {
            Logger.LogInformation("CalendarView: Saving event - IsEditMode={IsEditMode}, EventId={EventId}, Title={Title}", 
                isEditMode, editEventId, eventRequest.Title);
            
            isSaving = true;
            errorMessage = null;

            if (isEditMode)
            {
                var updateRequest = new UpdateEventRequest
                {
                    Title = eventRequest.Title,
                    Description = eventRequest.Description,
                    StartDate = eventRequest.StartDate,
                    EndDate = eventRequest.EndDate,
                    Location = eventRequest.Location,
                    IsAllDay = eventRequest.IsAllDay,
                    Color = eventRequest.Color,
                    CategoryId = eventRequest.CategoryId,
                    EventType = eventRequest.EventType,
                    IsPublic = eventRequest.IsPublic,
                    Invitations = eventRequest.Invitations?.Where(i => !string.IsNullOrWhiteSpace(i.InviteeName) && !string.IsNullOrWhiteSpace(i.InviteeEmail)).ToList()
                };
                await ApiService.UpdateEventAsync(editEventId, updateRequest);
                Logger.LogInformation("CalendarView: Event {EventId} updated successfully", editEventId);
                successMessage = "Event updated successfully!";
            }
            else
            {
                // Clean up empty invitations before sending
                if (eventRequest.Invitations != null)
                {
                    eventRequest.Invitations = eventRequest.Invitations
                        .Where(i => !string.IsNullOrWhiteSpace(i.InviteeName) && !string.IsNullOrWhiteSpace(i.InviteeEmail))
                        .ToList();
                }
                await ApiService.CreateEventAsync(eventRequest);
                Logger.LogInformation("CalendarView: New event created successfully - Title={Title}", eventRequest.Title);
                successMessage = "Event created successfully!";
            }

            CloseModal();
            await LoadEvents();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CalendarView: Failed to save event - IsEditMode={IsEditMode}", isEditMode);
            errorMessage = $"Failed to save event: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (dotNetHelper != null)
        {
            await JSRuntime.InvokeVoidAsync("fullCalendarInterop.destroy");
            dotNetHelper.Dispose();
        }
    }
}