@page "/calendar-list"
@using EventScheduler.Application.DTOs.Request
@using EventScheduler.Application.DTOs.Response
@using EventScheduler.Web.Services
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>My Events - Event Scheduler</PageTitle>

<div class="events-container">
    <!-- Header Section -->
    <div class="events-header">
        <div class="header-content">
            <div class="header-text">
                <div class="header-icon">
                    <i class="bi bi-list-task"></i>
                </div>
                <div>
                    <h1 class="header-title">My Events</h1>
                    <p class="header-subtitle">
                        Manage all your events in one place. Create, edit, and organize your schedule.
                    </p>
                </div>
            </div>
            <div class="header-actions">
                <a href="/calendar-view" class="btn btn-outline btn-calendar">
                    <i class="bi bi-calendar-heart"></i>
                    <span>Calendar View</span>
                </a>
                <button class="btn btn-primary btn-create" @onclick="ShowCreateModal">
                    <i class="bi bi-plus-lg"></i>
                    <span>New Event</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="events-content">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner">
                    <div class="spinner"></div>
                </div>
                <div class="loading-text">
                    <h3>Loading Your Events</h3>
                    <p>Getting everything ready for you...</p>
                </div>
            </div>
        }
        else if (events.Count == 0)
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="bi bi-calendar-x"></i>
                </div>
                <div class="empty-text">
                    <h3>No events yet</h3>
                    <p>Start by creating your first event to get organized!</p>
                </div>
                <button class="btn btn-primary btn-empty" @onclick="ShowCreateModal">
                    <i class="bi bi-plus-lg"></i>
                    Create Your First Event
                </button>
            </div>
        }
        else
        {
            <!-- Filter Section -->
            <div class="filter-section">
                <div class="filter-row">
                    <div class="filter-item">
                        <label><i class="bi bi-tag"></i> Event Type</label>
                        <select @bind="selectedEventType" @bind:after="FilterEvents" class="form-select">
                            <option value="">All Types</option>
                            <option value="Other">Other</option>
                            <option value="Festival">üéâ Festival</option>
                            <option value="Interview">üíº Interview</option>
                            <option value="Birthday">üéÇ Birthday</option>
                            <option value="Exam">üìù Exam</option>
                            <option value="Appointment">üè• Appointment</option>
                            <option value="Meeting">üë• Meeting</option>
                            <option value="Reminder">‚è∞ Reminder</option>
                            <option value="Task">‚úÖ Task</option>
                        </select>
                    </div>
                    <div class="filter-item">
                        <label><i class="bi bi-ui-checks"></i> Status</label>
                        <select @bind="selectedStatus" @bind:after="FilterEvents" class="form-select">
                            <option value="">All Status</option>
                            <option value="Scheduled">Scheduled</option>
                            <option value="InProgress">In Progress</option>
                            <option value="Completed">Completed</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    <div class="filter-item">
                        <label><i class="bi bi-search"></i> Search</label>
                        <input type="text" @bind="searchQuery" @bind:after="FilterEvents" 
                               class="form-control" placeholder="Search events..." />
                    </div>
                </div>
            </div>

            <div class="events-grid">
                @foreach (var evt in filteredEvents.OrderBy(e => e.StartDate))
                {
                    <div class="event-card @GetEventStatusClass(evt.Status)">
                        <div class="event-card-header">
                            <div class="event-title-section">
                                <h3 class="event-title">@evt.Title</h3>
                                <div class="event-status">
                                    <span class="status-badge status-@evt.Status.ToLower()">
                                        @evt.Status
                                    </span>
                                    <span class="type-badge">
                                        @GetEventTypeIcon(evt.EventType) @evt.EventType
                                    </span>
                                    @if (evt.IsPublic)
                                    {
                                        <span class="public-badge">
                                            <i class="bi bi-globe"></i> Public
                                        </span>
                                    }
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(evt.CategoryName))
                            {
                                <div class="event-category">
                                    <span class="category-badge">
                                        <i class="bi bi-tag"></i>
                                        @evt.CategoryName
                                    </span>
                                </div>
                            }
                        </div>

                        <div class="event-card-body">
                            @if (!string.IsNullOrEmpty(evt.Description))
                            {
                                <p class="event-description">@evt.Description</p>
                            }

                            <div class="event-details">
                                <div class="detail-item">
                                    <div class="detail-icon">
                                        <i class="bi bi-calendar"></i>
                                    </div>
                                    <div class="detail-content">
                                        <div class="detail-label">Date & Time</div>
                                        <div class="detail-value">
                                            @evt.StartDate.ToString("MMM dd, yyyy")
                                            @if (!evt.IsAllDay)
                                            {
                                                <span class="time">at @evt.StartDate.ToString("hh:mm tt")</span>
                                            }
                                            else
                                            {
                                                <span class="all-day">(All Day)</span>
                                            }
                                        </div>
                                    </div>
                                </div>

                                @if (!string.IsNullOrEmpty(evt.Location))
                                {
                                    <div class="detail-item">
                                        <div class="detail-icon">
                                            <i class="bi bi-geo-alt"></i>
                                        </div>
                                        <div class="detail-content">
                                            <div class="detail-label">Location</div>
                                            <div class="detail-value">@evt.Location</div>
                                        </div>
                                    </div>
                                }

                                @if (evt.ParticipantsCount > 0)
                                {
                                    <div class="detail-item">
                                        <div class="detail-icon">
                                            <i class="bi bi-people"></i>
                                        </div>
                                        <div class="detail-content">
                                            <div class="detail-label">Participants</div>
                                            <div class="detail-value">@evt.ParticipantsCount invited</div>
                                        </div>
                                    </div>
                                }

                                <div class="detail-item">
                                    <div class="detail-icon">
                                        <i class="bi bi-clock"></i>
                                    </div>
                                    <div class="detail-content">
                                        <div class="detail-label">Duration</div>
                                        <div class="detail-value">
                                            @if (evt.IsAllDay)
                                            {
                                                <span>All Day</span>
                                            }
                                            else
                                            {
                                                var duration = evt.EndDate - evt.StartDate;
                                                <span>@duration.Hours h @duration.Minutes m</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="event-card-footer">
                            <button class="btn btn-sm btn-edit" @onclick="() => ShowEditModal(evt)">
                                <i class="bi bi-pencil"></i>
                                Edit
                            </button>
                            <button class="btn btn-sm btn-delete" @onclick="() => DeleteEvent(evt.Id)">
                                <i class="bi bi-trash"></i>
                                Delete
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- Create/Edit Event Modal -->
@if (showModal)
{
    <div class="modal-overlay">
        <div class="modal-container">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                    <div class="modal-title">
                        <div class="modal-icon">
                            <i class="bi bi-@(isEditMode ? "pencil-square" : "plus-circle")"></i>
                        </div>
                        <div>
                            <h3>@(isEditMode ? "Edit Event" : "Create New Event")</h3>
                            <p>@(isEditMode ? "Update your event details" : "Add a new event to your calendar")</p>
                        </div>
                    </div>
                    <button class="modal-close" @onclick="CloseModal">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>

                <!-- Modal Body -->
                <div class="modal-body">
                    <EditForm Model="@eventRequest" OnValidSubmit="@SaveEvent">
                        <DataAnnotationsValidator />
                        
                        <div class="form-grid">
                            <!-- Title -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-type"></i>
                                    Event Title
                                    <span class="required">*</span>
                                </label>
                                <InputText class="form-control" @bind-Value="eventRequest.Title" 
                                         placeholder="What's the event about?" />
                                <ValidationMessage For="@(() => eventRequest.Title)" />
                            </div>

                            <!-- Description -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-text-paragraph"></i>
                                    Description
                                </label>
                                <InputTextArea class="form-control" rows="3" @bind-Value="eventRequest.Description" 
                                             placeholder="Add some details about your event (optional)" />
                            </div>

                            <!-- Date & Time -->
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="bi bi-clock"></i>
                                    Start Date & Time
                                    <span class="required">*</span>
                                </label>
                                <InputDate Type="InputDateType.DateTimeLocal" class="form-control" 
                                         @bind-Value="eventRequest.StartDate" />
                            </div>

                            <div class="form-group">
                                <label class="form-label">
                                    <i class="bi bi-clock-fill"></i>
                                    End Date & Time
                                    <span class="required">*</span>
                                </label>
                                <InputDate Type="InputDateType.DateTimeLocal" class="form-control" 
                                         @bind-Value="eventRequest.EndDate" />
                            </div>

                            <!-- Location -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-geo-alt"></i>
                                    Location
                                </label>
                                <InputText class="form-control" @bind-Value="eventRequest.Location" 
                                         placeholder="Where will this event take place? (optional)" />
                            </div>

                            <!-- All Day Toggle -->
                            <div class="form-group full-width">
                                <div class="toggle-group">
                                    <InputCheckbox class="toggle-input" id="isAllDay" @bind-Value="eventRequest.IsAllDay" />
                                    <label class="toggle-label" for="isAllDay">
                                        <div class="toggle-slider"></div>
                                        <span class="toggle-text">
                                            <i class="bi bi-sun"></i>
                                            All Day Event
                                        </span>
                                    </label>
                                </div>
                            </div>

                            <!-- Event Type -->
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="bi bi-tag"></i>
                                    Event Type
                                </label>
                                <InputSelect class="form-control" @bind-Value="eventRequest.EventType">
                                    <option value="Other">Other</option>
                                    <option value="Festival">üéâ Festival</option>
                                    <option value="Interview">üíº Interview</option>
                                    <option value="Birthday">üéÇ Birthday</option>
                                    <option value="Exam">üìù Exam</option>
                                    <option value="Appointment">üè• Appointment</option>
                                    <option value="Meeting">üë• Meeting</option>
                                    <option value="Reminder">‚è∞ Reminder</option>
                                    <option value="Task">‚úÖ Task</option>
                                </InputSelect>
                            </div>

                            <!-- Public/Private Toggle -->
                            <div class="form-group">
                                <div class="toggle-group">
                                    <InputCheckbox class="toggle-input" id="isPublic" @bind-Value="eventRequest.IsPublic" />
                                    <label class="toggle-label" for="isPublic">
                                        <div class="toggle-slider"></div>
                                        <span class="toggle-text">
                                            <i class="bi bi-globe"></i>
                                            Public Event
                                        </span>
                                    </label>
                                </div>
                            </div>

                            <!-- Invitations (only for private events) -->
                            @if (!eventRequest.IsPublic)
                            {
                                <div class="form-group full-width">
                                    <label class="form-label">
                                        <i class="bi bi-people"></i>
                                        Invitations (Optional)
                                    </label>
                                    @if (eventRequest.Invitations == null)
                                    {
                                        eventRequest.Invitations = new List<EventInvitationRequest>();
                                    }
                                    @foreach (var invitation in eventRequest.Invitations.ToList())
                                    {
                                        <div class="invitation-row">
                                            <input type="text" class="form-control" placeholder="Name" @bind="invitation.InviteeName" />
                                            <input type="email" class="form-control" placeholder="Email" @bind="invitation.InviteeEmail" />
                                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => eventRequest.Invitations.Remove(invitation)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    }
                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="AddInvitation">
                                        <i class="bi bi-plus"></i> Add Invitation
                                    </button>
                                </div>
                            }
                        </div>

                        <!-- Modal Footer -->
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                                <i class="bi bi-x-circle"></i>
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-@(isEditMode ? "check2" : "plus-lg")"></i>
                                @(isEditMode ? "Update Event" : "Create Event")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<style>
    /* Main Layout */
    .events-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }

    /* Header Styles */
    .events-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem 0;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    }

    .header-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 2rem;
    }

    .header-text {
        display: flex;
        align-items: center;
        gap: 1rem;
        flex: 1;
    }

    .header-icon {
        font-size: 3rem;
        opacity: 0.9;
    }

    .header-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .header-subtitle {
        font-size: 1.1rem;
        opacity: 0.9;
        margin: 0.5rem 0 0 0;
        max-width: 500px;
    }

    .header-actions {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    /* Button Styles */
    .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 12px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.3s ease;
        cursor: pointer;
        font-size: 0.95rem;
    }

    .btn-primary {
        background: linear-gradient(135deg, #00b4db 0%, #0083b0 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(0, 180, 219, 0.3);
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 180, 219, 0.4);
    }

    .btn-outline {
        background: transparent;
        color: white;
        border: 2px solid rgba(255,255,255,0.3);
    }

    .btn-outline:hover {
        background: rgba(255,255,255,0.1);
        border-color: rgba(255,255,255,0.5);
        transform: translateY(-2px);
    }

    /* Content Area */
    .events-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2rem;
    }

    /* Loading Styles */
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 4rem 2rem;
        text-align: center;
    }

    .loading-spinner {
        margin-bottom: 2rem;
    }

    .spinner {
        width: 60px;
        height: 60px;
        border: 4px solid #e3e3e3;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .loading-text h3 {
        color: #2d3748;
        margin-bottom: 0.5rem;
    }

    .loading-text p {
        color: #718096;
    }

    /* Empty State */
    .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 4rem 2rem;
        text-align: center;
        background: white;
        border-radius: 20px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    }

    .empty-icon {
        font-size: 4rem;
        color: #cbd5e0;
        margin-bottom: 1.5rem;
    }

    .empty-text h3 {
        color: #2d3748;
        margin-bottom: 0.5rem;
    }

    .empty-text p {
        color: #718096;
        margin-bottom: 2rem;
    }

    .btn-empty {
        padding: 1rem 2rem;
        font-size: 1.1rem;
    }

    /* Events Grid */
    .events-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
        gap: 1.5rem;
    }

    /* Event Card */
    .event-card {
        background: white;
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        overflow: hidden;
        border: 3px solid transparent;
    }

    .event-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 30px rgba(0,0,0,0.12);
    }

    .event-card.border-success {
        border-color: #48bb78;
    }

    .event-card.border-danger {
        border-color: #f56565;
    }

    .event-card.border-warning {
        border-color: #ed8936;
    }

    .event-card.border-primary {
        border-color: #4299e1;
    }

    .event-card-header {
        padding: 1.5rem 1.5rem 1rem;
        border-bottom: 1px solid #e2e8f0;
    }

    .event-title-section {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 1rem;
        margin-bottom: 0.5rem;
    }

    .event-title {
        font-size: 1.25rem;
        font-weight: 700;
        color: #2d3748;
        margin: 0;
        flex: 1;
    }

    .event-status {
        flex-shrink: 0;
    }

    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-scheduled {
        background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);
        color: white;
    }

    .status-completed {
        background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
        color: white;
    }

    .status-cancelled {
        background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%);
        color: white;
    }

    .status-inprogress {
        background: linear-gradient(135deg, #ed8936 0%, #dd6b20 100%);
        color: white;
    }

    .event-category {
        margin-top: 0.5rem;
    }

    .category-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
        padding: 0.25rem 0.75rem;
        background: #e2e8f0;
        color: #4a5568;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .event-card-body {
        padding: 1rem 1.5rem;
    }

    .event-description {
        color: #4a5568;
        line-height: 1.5;
        margin-bottom: 1rem;
    }

    .event-details {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .detail-item {
        display: flex;
        align-items: flex-start;
        gap: 0.75rem;
    }

    .detail-icon {
        color: #667eea;
        font-size: 1rem;
        margin-top: 0.1rem;
        flex-shrink: 0;
    }

    .detail-content {
        flex: 1;
    }

    .detail-label {
        font-size: 0.8rem;
        color: #718096;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 0.1rem;
    }

    .detail-value {
        font-size: 0.9rem;
        color: #2d3748;
        font-weight: 500;
    }

    .time, .all-day {
        color: #718096;
        font-size: 0.85rem;
    }

    .event-card-footer {
        padding: 1rem 1.5rem;
        background: #f8fafc;
        border-top: 1px solid #e2e8f0;
        display: flex;
        gap: 0.75rem;
    }

    .btn-sm {
        padding: 0.5rem 1rem;
        font-size: 0.85rem;
        border-radius: 8px;
    }

    .btn-edit {
        background: #e2e8f0;
        color: #4a5568;
        border: none;
    }

    .btn-edit:hover {
        background: #cbd5e0;
        transform: translateY(-1px);
    }

    .btn-delete {
        background: #fed7d7;
        color: #c53030;
        border: none;
    }

    .btn-delete:hover {
        background: #feb2b2;
        transform: translateY(-1px);
    }

    /* Modal Styles (same as calendar view) */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.6);
        backdrop-filter: blur(8px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        padding: 2rem;
        animation: fadeIn 0.3s ease;
    }

    .modal-container {
        width: 100%;
        max-width: 600px;
        max-height: 90vh;
        overflow: hidden;
    }

    .modal-content {
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0,0,0,0.2);
        animation: slideUp 0.3s ease;
    }

    .modal-header {
        padding: 2rem 2rem 1rem;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }

    .modal-title {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
    }

    .modal-icon {
        font-size: 2rem;
        color: #667eea;
    }

    .modal-title h3 {
        margin: 0;
        color: #2d3748;
        font-weight: 700;
    }

    .modal-title p {
        margin: 0.25rem 0 0 0;
        color: #718096;
        font-size: 0.9rem;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 1.25rem;
        color: #a0aec0;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 8px;
        transition: all 0.2s ease;
    }

    .modal-close:hover {
        background: #f7fafc;
        color: #718096;
    }

    .modal-body {
        padding: 1rem 2rem;
        max-height: 60vh;
        overflow-y: auto;
    }

    /* Form Styles */
    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
    }

    .form-group.full-width {
        grid-column: 1 / -1;
    }

    .form-label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 0.5rem;
    }

    .form-label i {
        color: #667eea;
    }

    .required {
        color: #e53e3e;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        background: white;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    /* Toggle Switch */
    .toggle-group {
        display: flex;
        align-items: center;
    }

    .toggle-input {
        display: none;
    }

    .toggle-label {
        display: flex;
        align-items: center;
        gap: 1rem;
        cursor: pointer;
        padding: 0.5rem 0;
    }

    .toggle-slider {
        width: 50px;
        height: 26px;
        background: #e2e8f0;
        border-radius: 50px;
        position: relative;
        transition: all 0.3s ease;
    }

    .toggle-slider::before {
        content: '';
        position: absolute;
        width: 20px;
        height: 20px;
        background: white;
        border-radius: 50%;
        top: 3px;
        left: 3px;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .toggle-input:checked + .toggle-label .toggle-slider {
        background: #667eea;
    }

    .toggle-input:checked + .toggle-label .toggle-slider::before {
        transform: translateX(24px);
    }

    .toggle-text {
        font-weight: 500;
        color: #2d3748;
    }

    /* Modal Footer */
    .modal-footer {
        padding: 1.5rem 2rem 2rem;
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        background: #f8fafc;
        border-top: 1px solid #e2e8f0;
    }

    .btn-secondary {
        background: #e2e8f0;
        color: #4a5568;
    }

    .btn-secondary:hover {
        background: #cbd5e0;
    }

    /* Animations */
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes slideUp {
        from { 
            opacity: 0;
            transform: translateY(20px);
        }
        to { 
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .header-content {
            flex-direction: column;
            text-align: center;
            gap: 1.5rem;
        }

        .header-text {
            flex-direction: column;
            text-align: center;
        }

        .header-actions {
            justify-content: center;
        }

        .events-grid {
            grid-template-columns: 1fr;
        }

        .events-content {
            padding: 1rem;
        }

        .form-grid {
            grid-template-columns: 1fr;
        }

        .modal-body {
            padding: 1rem;
        }

        .modal-footer {
            flex-direction: column;
        }
    }

    /* Invitation Rows */
    .invitation-row {
        display: grid;
        grid-template-columns: 1fr 1fr auto;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .invitation-row input {
        font-size: 0.9rem;
    }

    .invitation-row .btn {
        padding: 0.375rem 0.75rem;
    }

    /* Event Type and Public Badges */
    .type-badge {
        font-size: 0.8rem;
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        background: #f3f4f6;
        color: #374151;
        margin-left: 0.5rem;
    }

    .public-badge {
        font-size: 0.8rem;
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        background: #dcfce7;
        color: #16a34a;
        margin-left: 0.5rem;
    }

    .public-badge i {
        margin-right: 0.25rem;
    }

    /* Filter Section */
    .filter-section {
        background: white;
        padding: 1.25rem;
        border-radius: 12px;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .filter-row {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 1rem;
    }

    .filter-item label {
        display: block;
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: #374151;
        font-size: 0.9rem;
    }

    .filter-item label i {
        margin-right: 0.25rem;
        color: #667eea;
    }

    .filter-item .form-select,
    .filter-item .form-control {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #d1d5db;
        border-radius: 6px;
        font-size: 0.9rem;
    }

    .filter-item .form-select:focus,
    .filter-item .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
</style>

@code {
    private List<EventResponse> events = new();
    private List<EventResponse> filteredEvents = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditMode = false;
    private int editEventId = 0;
    private CreateEventRequest eventRequest = new() { Title = "", StartDate = DateTime.Now, EndDate = DateTime.Now.AddHours(1) };
    private bool hasCheckedAuth = false;
    private string selectedEventType = "";
    private string selectedStatus = "";
    private string searchQuery = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasCheckedAuth)
        {
            hasCheckedAuth = true;
            
            // Re-check authentication after render (when JS interop is available)
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated != true)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }
            
            // Get token from auth state and set it in ApiService
            var token = user.FindFirst("token")?.Value;
            if (!string.IsNullOrEmpty(token))
            {
                ApiService.SetToken(token);
            }
            
            await LoadEvents();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Initial check without JS interop (will succeed if already authenticated in memory)
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated == true)
        {
            hasCheckedAuth = true;
            
            // Get token from auth state and set it in ApiService
            var token = user.FindFirst("token")?.Value;
            if (!string.IsNullOrEmpty(token))
            {
                ApiService.SetToken(token);
            }
            
            await LoadEvents();
        }
        // If not authenticated here, we'll check again in OnAfterRenderAsync when JS is available
    }

    private async Task LoadEvents()
    {
        try
        {
            isLoading = true;
            events = await ApiService.GetAllEventsAsync();
            filteredEvents = events;
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("/login");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterEvents()
    {
        filteredEvents = events.Where(e =>
        {
            bool matchesType = string.IsNullOrEmpty(selectedEventType) || e.EventType == selectedEventType;
            bool matchesStatus = string.IsNullOrEmpty(selectedStatus) || e.Status == selectedStatus;
            bool matchesSearch = string.IsNullOrEmpty(searchQuery) ||
                                e.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                (e.Description?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false);
            return matchesType && matchesStatus && matchesSearch;
        }).ToList();
    }

    private void ShowCreateModal()
    {
        isEditMode = false;
        eventRequest = new CreateEventRequest 
        { 
            Title = "", 
            StartDate = DateTime.Now, 
            EndDate = DateTime.Now.AddHours(1) 
        };
        showModal = true;
    }

    private void ShowEditModal(EventResponse evt)
    {
        isEditMode = true;
        editEventId = evt.Id;
        eventRequest = new CreateEventRequest
        {
            Title = evt.Title,
            Description = evt.Description,
            StartDate = evt.StartDate,
            EndDate = evt.EndDate,
            Location = evt.Location,
            IsAllDay = evt.IsAllDay,
            Color = evt.Color,
            CategoryId = evt.CategoryId,
            EventType = evt.EventType,
            IsPublic = evt.IsPublic,
            Invitations = evt.Invitations?.Select(i => new EventInvitationRequest 
            { 
                InviteeName = i.InviteeName, 
                InviteeEmail = i.InviteeEmail 
            }).ToList()
        };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void AddInvitation()
    {
        if (eventRequest.Invitations == null)
        {
            eventRequest.Invitations = new List<EventInvitationRequest>();
        }
        eventRequest.Invitations.Add(new EventInvitationRequest { InviteeName = "", InviteeEmail = "" });
    }

    private async Task SaveEvent()
    {
        try
        {
            if (isEditMode)
            {
                var updateRequest = new UpdateEventRequest
                {
                    Title = eventRequest.Title,
                    Description = eventRequest.Description,
                    StartDate = eventRequest.StartDate,
                    EndDate = eventRequest.EndDate,
                    Location = eventRequest.Location,
                    IsAllDay = eventRequest.IsAllDay,
                    Color = eventRequest.Color,
                    CategoryId = eventRequest.CategoryId,
                    EventType = eventRequest.EventType,
                    IsPublic = eventRequest.IsPublic,
                    Invitations = eventRequest.Invitations?.Where(i => !string.IsNullOrWhiteSpace(i.InviteeName) && !string.IsNullOrWhiteSpace(i.InviteeEmail)).ToList()
                };
                await ApiService.UpdateEventAsync(editEventId, updateRequest);
            }
            else
            {
                // Clean up empty invitations before sending
                if (eventRequest.Invitations != null)
                {
                    eventRequest.Invitations = eventRequest.Invitations
                        .Where(i => !string.IsNullOrWhiteSpace(i.InviteeName) && !string.IsNullOrWhiteSpace(i.InviteeEmail))
                        .ToList();
                }
                await ApiService.CreateEventAsync(eventRequest);
            }

            CloseModal();
            await LoadEvents();
        }
        catch (Exception)
        {
            // Handle error
        }
    }

    private async Task DeleteEvent(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this event?");
        if (confirmed)
        {
            try
            {
                await ApiService.DeleteEventAsync(id);
                await LoadEvents();
            }
            catch (Exception ex)
            {
                // Handle error - could add error message display
                Console.WriteLine($"Error deleting event: {ex.Message}");
            }
        }
    }

    private string GetEventStatusClass(string status)
    {
        return status switch
        {
            "Completed" => "border-success",
            "Cancelled" => "border-danger",
            "InProgress" => "border-warning",
            _ => "border-primary"
        };
    }

    private string GetEventTypeIcon(string eventType)
    {
        return eventType switch
        {
            "Festival" => "üéâ",
            "Interview" => "üíº",
            "Birthday" => "üéÇ",
            "Exam" => "üìù",
            "Appointment" => "üè•",
            "Meeting" => "üë•",
            "Reminder" => "‚è∞",
            "Task" => "‚úÖ",
            _ => "üìÖ"
        };
    }
}