@page "/calendar-list"
@using EventScheduler.Application.DTOs.Request
@using EventScheduler.Application.DTOs.Response
@using EventScheduler.Web.Services
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>My Events - Event Scheduler</PageTitle>

<link rel="stylesheet" href="/css/calendar.css" />

<div class="events-container">
    <!-- Header Section -->
    <div class="calendar-header">
        <div class="header-content">
            <div class="header-text">
                <div class="header-icon">
                    <i class="bi bi-list-task"></i>
                </div>
                <div>
                    <h1 class="header-title">My Events</h1>
                    <p class="header-subtitle">
                        Manage all your events in one place. Create, edit, and organize your schedule.
                    </p>
                </div>
            </div>
            <div class="header-actions">
                <a href="/calendar-view" class="btn btn-outline btn-calendar">
                    <i class="bi bi-calendar-heart"></i>
                    <span>Calendar View</span>
                </a>
                <button class="btn btn-primary btn-create" @onclick="ShowCreateModal">
                    <i class="bi bi-plus-lg"></i>
                    <span>New Event</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="events-content">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner">
                    <div class="spinner"></div>
                </div>
                <div class="loading-text">
                    <h3>Loading Your Events</h3>
                    <p>Getting everything ready for you...</p>
                </div>
            </div>
        }
        else if (events.Count == 0)
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="bi bi-calendar-x"></i>
                </div>
                <div class="empty-text">
                    <h3>No events yet</h3>
                    <p>Start by creating your first event to get organized!</p>
                </div>
                <button class="btn btn-primary btn-empty" @onclick="ShowCreateModal">
                    <i class="bi bi-plus-lg"></i>
                    Create Your First Event
                </button>
            </div>
        }
        else
        {
            <!-- Filter Section -->
            <div class="filter-section">
                <div class="filter-row">
                    <div class="filter-item">
                        <label><i class="bi bi-tag"></i> Event Type</label>
                        <select @bind="selectedEventType" @bind:after="FilterEvents" class="form-select">
                            <option value="">All Types</option>
                            <option value="Other">Other</option>
                            <option value="Festival">üéâ Festival</option>
                            <option value="Interview">üíº Interview</option>
                            <option value="Birthday">üéÇ Birthday</option>
                            <option value="Exam">üìù Exam</option>
                            <option value="Appointment">üè• Appointment</option>
                            <option value="Meeting">üë• Meeting</option>
                            <option value="Reminder">‚è∞ Reminder</option>
                            <option value="Task">‚úÖ Task</option>
                        </select>
                    </div>
                    <div class="filter-item">
                        <label><i class="bi bi-ui-checks"></i> Status</label>
                        <select @bind="selectedStatus" @bind:after="FilterEvents" class="form-select">
                            <option value="">All Status</option>
                            <option value="Scheduled">Scheduled</option>
                            <option value="InProgress">In Progress</option>
                            <option value="Completed">Completed</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    <div class="filter-item">
                        <label><i class="bi bi-search"></i> Search</label>
                        <input type="text" @bind="searchQuery" @bind:after="FilterEvents" 
                               class="form-control" placeholder="Search events..." />
                    </div>
                </div>
            </div>

            <div class="events-grid">
                @foreach (var evt in filteredEvents.OrderBy(e => e.StartDate))
                {
                    <div class="event-card @GetEventStatusClass(evt.Status)">
                        <div class="event-card-header">
                            <div class="event-title-section">
                                <h3 class="event-title">@evt.Title</h3>
                                <div class="event-status">
                                    <span class="status-badge status-@evt.Status.ToLower()">
                                        @evt.Status
                                    </span>
                                    <span class="type-badge">
                                        @GetEventTypeIcon(evt.EventType) @evt.EventType
                                    </span>
                                    @if (evt.IsPublic)
                                    {
                                        <span class="public-badge">
                                            <i class="bi bi-globe"></i> Public
                                        </span>
                                    }
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(evt.CategoryName))
                            {
                                <div class="event-category">
                                    <span class="category-badge">
                                        <i class="bi bi-tag"></i>
                                        @evt.CategoryName
                                    </span>
                                </div>
                            }
                        </div>

                        <div class="event-card-body">
                            @if (!string.IsNullOrEmpty(evt.Description))
                            {
                                <p class="event-description">@evt.Description</p>
                            }

                            <div class="event-details">
                                <div class="detail-item">
                                    <div class="detail-icon">
                                        <i class="bi bi-calendar"></i>
                                    </div>
                                    <div class="detail-content">
                                        <div class="detail-label">Date & Time</div>
                                        <div class="detail-value">
                                            @evt.StartDate.ToString("MMM dd, yyyy")
                                            @if (!evt.IsAllDay)
                                            {
                                                <span class="time">at @evt.StartDate.ToString("hh:mm tt")</span>
                                            }
                                            else
                                            {
                                                <span class="all-day">(All Day)</span>
                                            }
                                        </div>
                                    </div>
                                </div>

                                @if (!string.IsNullOrEmpty(evt.Location))
                                {
                                    <div class="detail-item">
                                        <div class="detail-icon">
                                            <i class="bi bi-geo-alt"></i>
                                        </div>
                                        <div class="detail-content">
                                            <div class="detail-label">Location</div>
                                            <div class="detail-value">@evt.Location</div>
                                        </div>
                                    </div>
                                }

                                @if (evt.ParticipantsCount > 0)
                                {
                                    <div class="detail-item">
                                        <div class="detail-icon">
                                            <i class="bi bi-people"></i>
                                        </div>
                                        <div class="detail-content">
                                            <div class="detail-label">Participants</div>
                                            <div class="detail-value">@evt.ParticipantsCount invited</div>
                                        </div>
                                    </div>
                                }

                                <div class="detail-item">
                                    <div class="detail-icon">
                                        <i class="bi bi-clock"></i>
                                    </div>
                                    <div class="detail-content">
                                        <div class="detail-label">Duration</div>
                                        <div class="detail-value">
                                            @if (evt.IsAllDay)
                                            {
                                                <span>All Day</span>
                                            }
                                            else
                                            {
                                                var duration = evt.EndDate - evt.StartDate;
                                                <span>@duration.Hours h @duration.Minutes m</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="event-card-footer">
                            <button class="btn btn-sm btn-edit" @onclick="() => ShowEditModal(evt)">
                                <i class="bi bi-pencil"></i>
                                Edit
                            </button>
                            <button class="btn btn-sm btn-delete" @onclick="() => DeleteEvent(evt.Id)">
                                <i class="bi bi-trash"></i>
                                Delete
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- Create/Edit Event Modal -->
@if (showModal)
{
    <div class="modal-overlay">
        <div class="modal-container">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                    <div class="modal-title">
                        <div class="modal-icon">
                            <i class="bi bi-@(isEditMode ? "pencil-square" : "plus-circle")"></i>
                        </div>
                        <div>
                            <h3>@(isEditMode ? "Edit Event" : "Create New Event")</h3>
                            <p>@(isEditMode ? "Update your event details" : "Add a new event to your calendar")</p>
                        </div>
                    </div>
                    <button class="modal-close" @onclick="CloseModal">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>

                <!-- Modal Body -->
                <div class="modal-body">
                    <EditForm Model="@eventRequest" OnValidSubmit="@SaveEvent">
                        <DataAnnotationsValidator />
                        
                        <div class="form-grid">
                            <!-- Title -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-type"></i>
                                    Event Title
                                    <span class="required">*</span>
                                </label>
                                <InputText class="form-control" @bind-Value="eventRequest.Title" 
                                         placeholder="What's the event about?" />
                                <ValidationMessage For="@(() => eventRequest.Title)" />
                            </div>

                            <!-- Description -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-text-paragraph"></i>
                                    Description
                                </label>
                                <InputTextArea class="form-control" rows="3" @bind-Value="eventRequest.Description" 
                                             placeholder="Add some details about your event (optional)" />
                            </div>

                            <!-- Date & Time -->
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="bi bi-clock"></i>
                                    Start Date & Time
                                    <span class="required">*</span>
                                </label>
                                <InputDate Type="InputDateType.DateTimeLocal" class="form-control" 
                                         @bind-Value="eventRequest.StartDate" />
                            </div>

                            <div class="form-group">
                                <label class="form-label">
                                    <i class="bi bi-clock-fill"></i>
                                    End Date & Time
                                    <span class="required">*</span>
                                </label>
                                <InputDate Type="InputDateType.DateTimeLocal" class="form-control" 
                                         @bind-Value="eventRequest.EndDate" />
                            </div>

                            <!-- Location -->
                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-geo-alt"></i>
                                    Location
                                </label>
                                <InputText class="form-control" @bind-Value="eventRequest.Location" 
                                         placeholder="Where will this event take place? (optional)" />
                            </div>

                            <!-- All Day Toggle -->
                            <div class="form-group full-width">
                                <div class="toggle-group">
                                    <InputCheckbox class="toggle-input" id="isAllDay" @bind-Value="eventRequest.IsAllDay" />
                                    <label class="toggle-label" for="isAllDay">
                                        <div class="toggle-slider"></div>
                                        <span class="toggle-text">
                                            <i class="bi bi-sun"></i>
                                            All Day Event
                                        </span>
                                    </label>
                                </div>
                            </div>

                            <!-- Event Type -->
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="bi bi-tag"></i>
                                    Event Type
                                </label>
                                <InputSelect class="form-control" @bind-Value="eventRequest.EventType">
                                    <option value="Other">Other</option>
                                    <option value="Festival">üéâ Festival</option>
                                    <option value="Interview">üíº Interview</option>
                                    <option value="Birthday">üéÇ Birthday</option>
                                    <option value="Exam">üìù Exam</option>
                                    <option value="Appointment">üè• Appointment</option>
                                    <option value="Meeting">üë• Meeting</option>
                                    <option value="Reminder">‚è∞ Reminder</option>
                                    <option value="Task">‚úÖ Task</option>
                                </InputSelect>
                            </div>

                            <!-- Public/Private Toggle -->
                            <div class="form-group">
                                <div class="toggle-group">
                                    <InputCheckbox class="toggle-input" id="isPublic" @bind-Value="eventRequest.IsPublic" />
                                    <label class="toggle-label" for="isPublic">
                                        <div class="toggle-slider"></div>
                                        <span class="toggle-text">
                                            <i class="bi bi-globe"></i>
                                            Public Event
                                        </span>
                                    </label>
                                </div>
                            </div>

                            <!-- Invitations (only for private events) -->
                            @if (!eventRequest.IsPublic)
                            {
                                <div class="form-group full-width">
                                    <label class="form-label">
                                        <i class="bi bi-people"></i>
                                        Invitations (Optional)
                                    </label>
                                    @if (eventRequest.Invitations == null)
                                    {
                                        eventRequest.Invitations = new List<EventInvitationRequest>();
                                    }
                                    @foreach (var invitation in eventRequest.Invitations.ToList())
                                    {
                                        <div class="invitation-row">
                                            <input type="text" class="form-control" placeholder="Name" @bind="invitation.InviteeName" />
                                            <input type="email" class="form-control" placeholder="Email" @bind="invitation.InviteeEmail" />
                                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => eventRequest.Invitations.Remove(invitation)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    }
                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="AddInvitation">
                                        <i class="bi bi-plus"></i> Add Invitation
                                    </button>
                                </div>
                            }
                        </div>

                        <!-- Modal Footer -->
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                                <i class="bi bi-x-circle"></i>
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-@(isEditMode ? "check2" : "plus-lg")"></i>
                                @(isEditMode ? "Update Event" : "Create Event")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- ============================================
     ‚úÖ All styles moved to: wwwroot/css/pages/calendar-list.css
     This includes: event cards, modals, forms, filters, badges, animations, and responsive design
     ============================================ -->

@code {
    private List<EventResponse> events = new();
    private List<EventResponse> filteredEvents = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditMode = false;
    private int editEventId = 0;
    private CreateEventRequest eventRequest = new() { Title = "", StartDate = DateTime.Now, EndDate = DateTime.Now.AddHours(1) };
    private bool hasCheckedAuth = false;
    private string selectedEventType = "";
    private string selectedStatus = "";
    private string searchQuery = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasCheckedAuth)
        {
            hasCheckedAuth = true;
            
            // Now JavaScript is available and AuthStateProvider can load from localStorage
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated != true)
            {
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }
            
            // Get token from auth state and set it in ApiService
            var token = user.FindFirst("token")?.Value;
            if (!string.IsNullOrEmpty(token))
            {
                ApiService.SetToken(token);
                await LoadEvents();
                StateHasChanged();
            }
            else
            {
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Try to check auth, but don't redirect here - wait for OnAfterRenderAsync
        // because during prerendering, localStorage hasn't been read yet
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated == true)
        {
            hasCheckedAuth = true;
            
            // Set API token
            var token = user.FindFirst("token")?.Value;
            if (!string.IsNullOrEmpty(token))
            {
                ApiService.SetToken(token);
                await LoadEvents();
            }
        }
        else
        {
            // Don't redirect here - wait for OnAfterRenderAsync when localStorage is available
        }
    }

    private async Task LoadEvents()
    {
        try
        {
            isLoading = true;
            events = await ApiService.GetAllEventsAsync();
            filteredEvents = events;
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("/login");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterEvents()
    {
        filteredEvents = events.Where(e =>
        {
            bool matchesType = string.IsNullOrEmpty(selectedEventType) || e.EventType == selectedEventType;
            bool matchesStatus = string.IsNullOrEmpty(selectedStatus) || e.Status == selectedStatus;
            bool matchesSearch = string.IsNullOrEmpty(searchQuery) ||
                                e.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                (e.Description?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false);
            return matchesType && matchesStatus && matchesSearch;
        }).ToList();
    }

    private void ShowCreateModal()
    {
        isEditMode = false;
        eventRequest = new CreateEventRequest 
        { 
            Title = "", 
            StartDate = DateTime.Now, 
            EndDate = DateTime.Now.AddHours(1) 
        };
        showModal = true;
    }

    private void ShowEditModal(EventResponse evt)
    {
        isEditMode = true;
        editEventId = evt.Id;
        eventRequest = new CreateEventRequest
        {
            Title = evt.Title,
            Description = evt.Description,
            StartDate = evt.StartDate,
            EndDate = evt.EndDate,
            Location = evt.Location,
            IsAllDay = evt.IsAllDay,
            Color = evt.Color,
            CategoryId = evt.CategoryId,
            EventType = evt.EventType,
            IsPublic = evt.IsPublic,
            Invitations = evt.Invitations?.Select(i => new EventInvitationRequest 
            { 
                InviteeName = i.InviteeName, 
                InviteeEmail = i.InviteeEmail 
            }).ToList()
        };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void AddInvitation()
    {
        if (eventRequest.Invitations == null)
        {
            eventRequest.Invitations = new List<EventInvitationRequest>();
        }
        eventRequest.Invitations.Add(new EventInvitationRequest { InviteeName = "", InviteeEmail = "" });
    }

    private async Task SaveEvent()
    {
        try
        {
            if (isEditMode)
            {
                var updateRequest = new UpdateEventRequest
                {
                    Title = eventRequest.Title,
                    Description = eventRequest.Description,
                    StartDate = eventRequest.StartDate,
                    EndDate = eventRequest.EndDate,
                    Location = eventRequest.Location,
                    IsAllDay = eventRequest.IsAllDay,
                    Color = eventRequest.Color,
                    CategoryId = eventRequest.CategoryId,
                    EventType = eventRequest.EventType,
                    IsPublic = eventRequest.IsPublic,
                    Invitations = eventRequest.Invitations?.Where(i => !string.IsNullOrWhiteSpace(i.InviteeName) && !string.IsNullOrWhiteSpace(i.InviteeEmail)).ToList()
                };
                await ApiService.UpdateEventAsync(editEventId, updateRequest);
            }
            else
            {
                // Clean up empty invitations before sending
                if (eventRequest.Invitations != null)
                {
                    eventRequest.Invitations = eventRequest.Invitations
                        .Where(i => !string.IsNullOrWhiteSpace(i.InviteeName) && !string.IsNullOrWhiteSpace(i.InviteeEmail))
                        .ToList();
                }
                await ApiService.CreateEventAsync(eventRequest);
            }

            CloseModal();
            await LoadEvents();
        }
        catch (InvalidOperationException ex)
        {
            // Handle validation errors with specific message
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
        catch (Exception)
        {
            // Handle other errors
            var message = isEditMode ? "Failed to update event." : "Failed to create event.";
            await JSRuntime.InvokeVoidAsync("alert", message);
        }
    }

    private async Task DeleteEvent(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this event?");
        if (confirmed)
        {
            try
            {
                await ApiService.DeleteEventAsync(id);
                await LoadEvents();
            }
            catch (Exception ex)
            {
                // Handle error - could add error message display
                Console.WriteLine($"Error deleting event: {ex.Message}");
            }
        }
    }

    private string GetEventStatusClass(string status)
    {
        return status switch
        {
            "Completed" => "border-success",
            "Cancelled" => "border-danger",
            "InProgress" => "border-warning",
            _ => "border-primary"
        };
    }

    private string GetEventTypeIcon(string eventType)
    {
        return eventType switch
        {
            "Festival" => "üéâ",
            "Interview" => "üíº",
            "Birthday" => "üéÇ",
            "Exam" => "üìù",
            "Appointment" => "üè•",
            "Meeting" => "üë•",
            "Reminder" => "‚è∞",
            "Task" => "‚úÖ",
            _ => "üìÖ"
        };
    }
}