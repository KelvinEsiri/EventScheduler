@page "/calendar"
@using EventScheduler.Application.DTOs.Request
@using EventScheduler.Application.DTOs.Response
@using EventScheduler.Web.Services
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>My Calendar - Event Scheduler</PageTitle>

<div class="container-fluid mt-4">
    <div class="row mb-4">
        <div class="col">
            <h2>My Events</h2>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <i class="bi bi-plus-circle"></i> New Event
            </button>
            <button class="btn btn-outline-secondary ms-2" @onclick="Logout">
                Logout
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (events.Count == 0)
    {
        <div class="alert alert-info text-center">
            <h4>No events yet</h4>
            <p>Create your first event to get started!</p>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var evt in events.OrderBy(e => e.StartDate))
            {
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card @GetEventStatusClass(evt.Status)">
                        <div class="card-body">
                            <h5 class="card-title">@evt.Title</h5>
                            <p class="card-text">@evt.Description</p>
                            <div class="mb-2">
                                <small class="text-muted">
                                    <i class="bi bi-calendar"></i> @evt.StartDate.ToString("MMM dd, yyyy")
                                    @if (!evt.IsAllDay)
                                    {
                                        <span> at @evt.StartDate.ToString("hh:mm tt")</span>
                                    }
                                </small>
                            </div>
                            @if (!string.IsNullOrEmpty(evt.Location))
                            {
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="bi bi-geo-alt"></i> @evt.Location
                                    </small>
                                </div>
                            }
                            <div class="mt-3">
                                <span class="badge bg-secondary">@evt.Status</span>
                                @if (!string.IsNullOrEmpty(evt.CategoryName))
                                {
                                    <span class="badge bg-info">@evt.CategoryName</span>
                                }
                            </div>
                            <div class="mt-3">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditModal(evt)">
                                    Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger ms-2" @onclick="() => DeleteEvent(evt.Id)">
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditMode ? "Edit Event" : "Create Event")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@eventRequest" OnValidSubmit="@SaveEvent">
                        <div class="mb-3">
                            <label class="form-label">Title</label>
                            <InputText class="form-control" @bind-Value="eventRequest.Title" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea class="form-control" rows="3" @bind-Value="eventRequest.Description" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Start Date & Time</label>
                            <InputDate Type="InputDateType.DateTimeLocal" class="form-control" @bind-Value="eventRequest.StartDate" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">End Date & Time</label>
                            <InputDate Type="InputDateType.DateTimeLocal" class="form-control" @bind-Value="eventRequest.EndDate" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Location</label>
                            <InputText class="form-control" @bind-Value="eventRequest.Location" />
                        </div>
                        <div class="mb-3 form-check">
                            <InputCheckbox class="form-check-input" id="isAllDay" @bind-Value="eventRequest.IsAllDay" />
                            <label class="form-check-label" for="isAllDay">All Day Event</label>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<EventResponse> events = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditMode = false;
    private int editEventId = 0;
    private CreateEventRequest eventRequest = new() { Title = "", StartDate = DateTime.Now, EndDate = DateTime.Now.AddHours(1) };
    private bool hasCheckedAuth = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasCheckedAuth)
        {
            hasCheckedAuth = true;
            
            // Re-check authentication after render (when JS interop is available)
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated != true)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }
            
            // Get token from auth state and set it in ApiService
            var token = user.FindFirst("token")?.Value;
            if (!string.IsNullOrEmpty(token))
            {
                ApiService.SetToken(token);
            }
            
            await LoadEvents();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Initial check without JS interop (will succeed if already authenticated in memory)
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated == true)
        {
            hasCheckedAuth = true;
            
            // Get token from auth state and set it in ApiService
            var token = user.FindFirst("token")?.Value;
            if (!string.IsNullOrEmpty(token))
            {
                ApiService.SetToken(token);
            }
            
            await LoadEvents();
        }
        // If not authenticated here, we'll check again in OnAfterRenderAsync when JS is available
    }

    private async Task LoadEvents()
    {
        try
        {
            isLoading = true;
            events = await ApiService.GetAllEventsAsync();
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("/login");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateModal()
    {
        isEditMode = false;
        eventRequest = new CreateEventRequest 
        { 
            Title = "", 
            StartDate = DateTime.Now, 
            EndDate = DateTime.Now.AddHours(1) 
        };
        showModal = true;
    }

    private void ShowEditModal(EventResponse evt)
    {
        isEditMode = true;
        editEventId = evt.Id;
        eventRequest = new CreateEventRequest
        {
            Title = evt.Title,
            Description = evt.Description,
            StartDate = evt.StartDate,
            EndDate = evt.EndDate,
            Location = evt.Location,
            IsAllDay = evt.IsAllDay,
            Color = evt.Color,
            CategoryId = evt.CategoryId
        };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task SaveEvent()
    {
        try
        {
            if (isEditMode)
            {
                var updateRequest = new UpdateEventRequest
                {
                    Title = eventRequest.Title,
                    Description = eventRequest.Description,
                    StartDate = eventRequest.StartDate,
                    EndDate = eventRequest.EndDate,
                    Location = eventRequest.Location,
                    IsAllDay = eventRequest.IsAllDay,
                    Color = eventRequest.Color,
                    CategoryId = eventRequest.CategoryId
                };
                await ApiService.UpdateEventAsync(editEventId, updateRequest);
            }
            else
            {
                await ApiService.CreateEventAsync(eventRequest);
            }

            CloseModal();
            await LoadEvents();
        }
        catch (Exception)
        {
            // Handle error
        }
    }

    private async Task DeleteEvent(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this event?");
        if (confirmed)
        {
            try
            {
                await ApiService.DeleteEventAsync(id);
                await LoadEvents();
            }
            catch (Exception ex)
            {
                // Handle error - could add error message display
                Console.WriteLine($"Error deleting event: {ex.Message}");
            }
        }
    }

    private string GetEventStatusClass(string status)
    {
        return status switch
        {
            "Completed" => "border-success",
            "Cancelled" => "border-danger",
            "InProgress" => "border-warning",
            _ => "border-primary"
        };
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("/logout");
    }
}
