@page "/register"
@using EventScheduler.Application.DTOs.Request
@using EventScheduler.Web.Services
@inject ApiService ApiService
@inject AuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Register - Event Scheduler</PageTitle>

<link rel="stylesheet" href="~/css/auth.css" />

<div class="auth-container">
    <div class="auth-card">
        <div class="auth-card-header">
            <h3>Create Account</h3>
        </div>

        <div class="auth-card-body">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="auth-alert auth-alert-danger" role="alert">
                    <i class="bi bi-exclamation-triangle"></i>
                    @errorMessage
                </div>
            }

            <EditForm Model="@registerRequest" OnValidSubmit="@HandleRegister" class="auth-form">
                <DataAnnotationsValidator />
                
                <div class="form-group">
                    <label for="fullname" class="form-label">
                        <i class="bi bi-person-badge"></i>
                        Full Name
                    </label>
                    <InputText id="fullname" class="form-control" @bind-Value="registerRequest.FullName" placeholder="Enter your full name" />
                    <ValidationMessage For="@(() => registerRequest.FullName)" />
                </div>

                <div class="form-group">
                    <label for="username" class="form-label">
                        <i class="bi bi-person"></i>
                        Username
                    </label>
                    <InputText id="username" class="form-control" @bind-Value="registerRequest.Username" placeholder="Choose a username" />
                    <ValidationMessage For="@(() => registerRequest.Username)" />
                </div>

                <div class="form-group">
                    <label for="email" class="form-label">
                        <i class="bi bi-envelope"></i>
                        Email
                    </label>
                    <InputText id="email" type="email" class="form-control" @bind-Value="registerRequest.Email" placeholder="Enter your email" />
                    <ValidationMessage For="@(() => registerRequest.Email)" />
                </div>

                <div class="form-group">
                    <label for="password" class="form-label">
                        <i class="bi bi-lock"></i>
                        Password
                    </label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="registerRequest.Password" placeholder="Choose a strong password" />
                    <small class="form-text">
                        Password must be at least 8 characters long
                    </small>
                    <ValidationMessage For="@(() => registerRequest.Password)" />
                </div>

                <button type="submit" class="auth-btn auth-btn-primary" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="auth-spinner"></span>
                    }
                    <span>Register</span>
                </button>
            </EditForm>
        </div>

        <div class="auth-footer">
            <p>Already have an account? <a href="/login">Login here</a></p>
        </div>
    </div>
</div>

@code {
    private RegisterRequest registerRequest = new() { Username = "", Email = "", Password = "", FullName = "" };
    private string? errorMessage;
    private bool isLoading = false;

    private async Task HandleRegister()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var response = await ApiService.RegisterAsync(registerRequest);
            
            if (response != null)
            {
                AuthStateProvider.SetAuthentication(response.Username, response.Email, response.UserId, response.Token);
                ApiService.SetToken(response.Token);
                NavigationManager.NavigateTo("/calendar-list");
            }
        }
        catch (Exception)
        {
            errorMessage = "Registration failed. Username or email may already exist.";
        }
        finally
        {
            isLoading = false;
        }
    }
}
